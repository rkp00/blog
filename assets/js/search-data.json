{
  
    
        "post0": {
            "title": "Configuring Pi-Hole with DNS over HTTPS",
            "content": "Pi-Hole DNS over HTTPS . I just set up DNS over HTTPS using this guide on my pi-hole DNS sink. . Basically, . Get the cloudflared daemon compiled for ARM (Raspberry Pi) . | Configure it as a service that runs on startup under a user named cloudflared . | Use systemd to start the service (or reboot, I guess?) . | Ultimately this still goes to Cloudflare’s 1.1.1.1 DNS, except routed over HTTPS: . # Commandline args for cloudflared CLOUDFLARED_OPTS=--port 5053 --upstream https://1.1.1.1/dns-query --upstream https://1.0.0.1/dns-query . Why? Basically, with traditional HTTPS people don’t know what you are browsing (because it’s encrypted) but they can definitely tell what website (domain name) you are looking at. . Even if you are visiting a site using HTTPS, your DNS query is sent over an unencrypted connection. That means that even if you are browsing https://cloudflare.com, anyone listening to packets on the network knows you are attempting to visit cloudflare.com. . The second problem with unencrypted DNS is that it is easy for a Man-In-The-Middle to change DNS answers to route unsuspecting visitors to their phishing, malware or surveillance site. DNSSEC solves this problem as well by providing a mechanism to check the validity of a DNS answer, but only a single-digit percentage of domains use DNSSEC. . With DNS over HTTPS, a man in the middle can’t see the content, nor can they tell what website you are on. Also prevents tampering with DNS as as side benefit. :sweat_smile: .",
            "url": "/markdown/2020/04/30/pi-hole_setup.html",
            "relUrl": "/markdown/2020/04/30/pi-hole_setup.html",
            "date": " • Apr 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Porsche Classifier",
            "content": "Porsche Classifier . Porsche Classifier . Identify Porsche models(718, 911, Taycan, Macan, Cayenne, Panamera) with 95% accuracy. . Trained using fastai-v3, pytorch and Gradient. . Uses resnet50 and trained on a Nvidia Quadro P5000. . Built on docker and is hosted on render. . Trained on a dataset of publicly sourced images containing 30000 Porsche car models of varying degree of quality. . Porsche cars, specially the latest generations of the Panamera/Taycan,Macan/Cayenne &amp; 911/718 can be pretty tricky to tell apart for a layman who isn’t paying very close attention, which is why I wanted to test out what kind of features this deep learning model would pick up. . Creating your own dataset from Google Images . In this tutorial we will see how to easily create an image dataset through Google Images. Note: You will have to repeat these steps for any new category you want to Google (e.g once for dogs and once for cats). . Porsche Classifier Porsche Classifier | Identify Porsche models(718, 911, Taycan, Macan, Cayenne, Panamera) with 95% accuracy. Trained using fastai-v3, pytorch and Gradient. | Uses resnet50 and trained on a Nvidia Quadro P5000. | Built on docker and is hosted on render. | Trained on a dataset of publicly sourced images containing 30000 Porsche car models of varying degree of quality. | | Creating your own dataset from Google Images | Get a list of URLs Search and scroll | Download into file | Create directory and upload urls file into your server | Download images | View data | Train model | Interpretation | Cleaning Up | Putting your model in production | Things that can go wrong | Learning rate (LR) too high | Learning rate (LR) too low | Too few epochs | Too many epochs | | | In [0]: . from fastai.vision import * . Get a list of URLs . Search and scroll . Go to Google Images and search for the images you are interested in. The more specific you are in your Google Search, the better the results and the less manual pruning you will have to do. . Scroll down until you’ve seen all the images you want to download, or until you see a button that says ‘Show more results’. All the images you scrolled past are now available to download. To get more, click on the button, and continue scrolling. The maximum number of images Google Images shows is 700. . It is a good idea to put things you want to exclude into the search query, for instance if you are searching for the Eurasian wolf, “canis lupus lupus”, it might be a good idea to exclude other variants: . “canis lupus lupus” -dog -arctos -familiaris -baileyi -occidentalis . You can also limit your results to show only photos by clicking on Tools and selecting Photos from the Type dropdown. . Download into file . Now you must run some Javascript code in your browser which will save the URLs of all the images you want for you dataset. . In Google Chrome press CtrlShiftj on Windows/Linux and CmdOptj on macOS, and a small window the javascript ‘Console’ will appear. In Firefox press CtrlShiftk on Windows/Linux or CmdOptk on macOS. That is where you will paste the JavaScript commands. . You will need to get the urls of each of the images. Before running the following commands, you may want to disable ad blocking extensions (uBlock, AdBlockPlus etc.) in Chrome. Otherwise the window.open() command doesn’t work. Then you can run the following commands: . urls=Array.from(document.querySelectorAll(&#39;.rg_i&#39;)).map(el=&gt; el.hasAttribute(&#39;data-src&#39;)?el.getAttribute(&#39;data-src&#39;):el.getAttribute(&#39;data-iurl&#39;)); window.open(&#39;data:text/csv;charset=utf-8,&#39; + escape(urls.join(&#39; n&#39;))); . Create directory and upload urls file into your server . Choose an appropriate name for your labeled images. You can run these steps multiple times to create different labels. . In [0]: folder = &#39;718&#39; file = &#39;718.csv&#39; In [0]: folder = &#39;911&#39; file = &#39;911.csv&#39; In [0]: folder = &#39;cayenne&#39; file = &#39;cayenne.csv&#39; In [0]: folder = &#39;macan&#39; file = &#39;macan.csv&#39; In [0]: folder = &#39;taycan&#39; file = &#39;taycan.csv&#39; In [0]: folder = &#39;panamera&#39; file = &#39;panamera.csv&#39; . You will need to run this cell once per each category. . In [0]: path = Path(&#39;data/porsche&#39;) dest = path/folder dest.mkdir(parents=True, exist_ok=True) In [0]: path.ls() Out[0]: [PosixPath(&#39;data/porsche/cayenne&#39;), PosixPath(&#39;data/porsche/panamera.csv&#39;), PosixPath(&#39;data/porsche/cayenne.csv&#39;), PosixPath(&#39;data/porsche/panamera&#39;), PosixPath(&#39;data/porsche/taycan&#39;), PosixPath(&#39;data/porsche/911.csv&#39;), PosixPath(&#39;data/porsche/taycan.csv&#39;), PosixPath(&#39;data/porsche/911&#39;), PosixPath(&#39;data/porsche/macan.csv&#39;), PosixPath(&#39;data/porsche/718&#39;), PosixPath(&#39;data/porsche/718.csv&#39;), PosixPath(&#39;data/porsche/macan&#39;)] . Finally, upload your urls file. You just need to press ‘Upload’ in your working directory and select your file, then click ‘Upload’ for each of the displayed files. . uploaded file . Download images . Now you will need to download your images from their respective urls. . fast.ai has a function that allows you to do just that. You just have to specify the urls filename as well as the destination folder and this function will download and save all images that can be opened. If they have some problem in being opened, they will not be saved. . Let’s download our images! Notice you can choose a maximum number of images to be downloaded. In this case we will not download all the urls. . You will need to run this line once for every category. . In [0]: classes = [&#39;taycan&#39;,&#39;panamera&#39;,&#39;macan&#39;,&#39;cayenne&#39;,&#39;718&#39;,&#39;911&#39;] In [0]: download_images(path/file, dest, max_pics=500) In [0]: # If you have problems download, try with `max_workers=0` to see exceptions: download_images(path/file, dest, max_pics=20, max_workers=0) . Then we can remove any images that can’t be opened: . In [0]: for c in classes: print(c) verify_images(path/c, delete=True, max_size=500) taycan panamera macan cayenne 718 911 . View data . In [0]: np.random.seed(42) data = ImageDataBunch.from_folder(path, train=&quot;.&quot;, valid_pct=0.2, ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats) In [0]: #If you already cleaned your data, run this cell instead of the one before np.random.seed(42) data = ImageDataBunch.from_csv(path, folder=&quot;.&quot;, valid_pct=0.2, csv_labels=&#39;cleaned.csv&#39;, ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats) . Good! Let’s take a look at some of our pictures then. . In [0]: data.classes Out[0]: [&#39;718&#39;, &#39;911&#39;, &#39;cayenne&#39;, &#39;macan&#39;, &#39;panamera&#39;, &#39;taycan&#39;] In [0]: data.show_batch(rows=6, figsize=(7,8)) In [0]: data.classes, data.c, len(data.train_ds), len(data.valid_ds) Out[0]: ([&#39;718&#39;, &#39;911&#39;, &#39;cayenne&#39;, &#39;macan&#39;, &#39;panamera&#39;, &#39;taycan&#39;], 6, 1920, 480) . Train model . In [0]: learn = cnn_learner(data, models.resnet50, metrics=error_rate) In [0]: learn.fit_one_cycle(40) . epoch | train_loss | valid_loss | error_rate | time —– | ———- | ———- | ———- | —- 0 | 2.608914 | 1.610778 | 0.606250 | 00:09 1 | 2.229989 | 1.467350 | 0.531250 | 00:09 2 | 1.992984 | 1.457949 | 0.495833 | 00:10 3 | 1.800289 | 1.435493 | 0.481250 | 00:09 4 | 1.639752 | 1.454458 | 0.479167 | 00:09 5 | 1.502409 | 1.400133 | 0.464583 | 00:09 6 | 1.371669 | 1.300878 | 0.450000 | 00:10 7 | 1.258696 | 1.236995 | 0.418750 | 00:09 8 | 1.138708 | 1.241532 | 0.418750 | 00:09 9 | 1.043424 | 1.175137 | 0.406250 | 00:10 10 | 0.984921 | 1.146469 | 0.385417 | 00:10 11 | 0.927935 | 1.169490 | 0.379167 | 00:10 12 | 0.876125 | 1.170498 | 0.391667 | 00:10 13 | 0.825623 | 1.195051 | 0.375000 | 00:10 14 | 0.765536 | 1.155461 | 0.364583 | 00:10 15 | 0.727942 | 1.145015 | 0.381250 | 00:10 16 | 0.688683 | 1.260339 | 0.387500 | 00:10 17 | 0.637377 | 1.175742 | 0.366667 | 00:10 18 | 0.608817 | 1.228916 | 0.385417 | 00:10 19 | 0.572675 | 1.248361 | 0.379167 | 00:09 20 | 0.555676 | 1.256141 | 0.364583 | 00:10 21 | 0.511557 | 1.273524 | 0.375000 | 00:10 22 | 0.483267 | 1.251337 | 0.362500 | 00:10 23 | 0.436271 | 1.288411 | 0.354167 | 00:10 24 | 0.415738 | 1.234846 | 0.364583 | 00:10 25 | 0.397631 | 1.279648 | 0.354167 | 00:10 26 | 0.377773 | 1.224547 | 0.347917 | 00:10 27 | 0.352112 | 1.226564 | 0.339583 | 00:09 28 | 0.338672 | 1.195467 | 0.341667 | 00:10 29 | 0.328226 | 1.212193 | 0.347917 | 00:10 30 | 0.296725 | 1.213175 | 0.339583 | 00:10 31 | 0.290399 | 1.222019 | 0.327083 | 00:10 32 | 0.263940 | 1.222777 | 0.327083 | 00:10 33 | 0.258763 | 1.207108 | 0.322917 | 00:10 34 | 0.253563 | 1.217487 | 0.329167 | 00:10 35 | 0.236343 | 1.217709 | 0.322917 | 00:10 36 | 0.221070 | 1.228969 | 0.325000 | 00:10 37 | 0.230405 | 1.240643 | 0.327083 | 00:10 38 | 0.217511 | 1.230480 | 0.318750 | 00:10 39 | 0.209594 | 1.243002 | 0.318750 | 00:10 . In [0]: learn.save(&#39;stage-1&#39;) In [0]: learn.unfreeze() In [0]: learn.lr_find() 25.00% [1/4 00:12&lt;00:37] . epoch | train_loss | valid_loss | error_rate | time —– | ———- | ———- | ———- | —- 0 | 0.196860 | #na# | 00:12 . 83.33% [25/30 00:10&lt;00:02 0.6416] LR Finder is complete, type {learner_name}.recorder.plot() to see the graph. . In [0]: # If the plot is not showing try to give a start and end learning rate # learn.lr_find(start_lr=1e-5, end_lr=1e-1) learn.recorder.plot() In [0]: learn.fit_one_cycle(2, max_lr=slice(3e-5,3e-4)) epoch train_loss valid_loss error_rate time 0 0.280386 1.524914 0.372917 00:13 1 0.276844 1.312542 0.345833 00:13 In [0]: learn.save(&#39;stage-2&#39;) . Interpretation . In [0]: learn.load(‘stage-2’); In [0]: interp = ClassificationInterpretation.from_learner(learn) In [0]: interp.plot_confusion_matrix() . Cleaning Up . Some of our top losses aren’t due to bad performance by our model. There are images in our data set that shouldn’t be. . Using the ImageCleaner widget from fastai.widgets we can prune our top losses, removing photos that don’t belong. . In [0]: from fastai.widgets import * . First we need to get the file paths from our top_losses. We can do this with .from_toplosses. We then feed the top losses indexes and corresponding dataset to ImageCleaner. . Notice that the widget will not delete images directly from disk but it will create a new csv file cleaned.csv from where you can create a new ImageDataBunch with the corrected labels to continue training your model. . In [0]: db = (ImageList.from_folder(path) .split_none() .label_from_folder() .transform(get_transforms(), size=224) .databunch() ) In [0]: # If you already cleaned your data using indexes from `from_toplosses`, # run this cell instead of the one before to proceed with removing duplicates. # Otherwise all the results of the previous step would be overwritten by # the new run of `ImageCleaner`. db = (ImageList.from_csv(path, &#39;cleaned.csv&#39;, folder=&#39;.&#39;) .split_none() .label_from_df() .transform(get_transforms(), size=224) .databunch() ) . Then we create a new learner to use our new databunch with all the images. . In [0]: learn_cln = cnn_learner(db, models.resnet50, metrics=error_rate) learn_cln.load(&#39;stage-2&#39;); In [0]: ds, idxs = DatasetFormatter().from_toplosses(learn_cln) In [0]: # Don&#39;t run this in google colab or any other instances running jupyter lab. # If you do run this on Jupyter Lab, you need to restart your runtime and # runtime state including all local variables will be lost. ImageCleaner(ds, idxs, path) . HBox(children=(VBox(children=(Image(value=b’ xff xd8 xff xe0 x00 x10JFIF x00 x01 x01 x01 x00d x00d x00 x00 xff… Button(button_style=’primary’, description=’Next Batch’, layout=Layout(width=’auto’), style=ButtonStyle()) Flag photos for deletion by clicking ‘Delete’. Then click ‘Next Batch’ to delete flagged photos and keep the rest in that row. ImageCleaner will show you a new row of images until there are no more to show. In this case, the widget will show you images until there are none left from top_losses.ImageCleaner(ds, idxs) . You can also find duplicates in your dataset and delete them! To do this, you need to run .from_similars to get the potential duplicates’ ids and then run ImageCleaner with duplicates=True. The API works in a similar way as with misclassified images: just choose the ones you want to delete and click ‘Next Batch’ until there are no more images left. . Make sure to recreate the databunch and learn_cln from the cleaned.csv file. Otherwise the file would be overwritten from scratch, losing all the results from cleaning the data from toplosses. . In [0]: ds, idxs = DatasetFormatter().from_similars(learn_cln) Getting activations... 100.00% [36/36 00:05&lt;00:00] Computing similarities... In [0]: ImageCleaner(ds, idxs, path, duplicates=True) HBox(children=(VBox(children=(Image(value=b&#39; xff xd8 xff xe0 x00 x10JFIF x00 x01 x01 x01 x00d x00d x00 x00 xff… Button(button_style=&#39;primary&#39;, description=&#39;Next Batch&#39;, layout=Layout(width=&#39;auto&#39;), style=ButtonStyle()) . Remember to recreate your ImageDataBunch from your cleaned.csv to include the changes you made in your data! . Putting your model in production . First thing first, let’s export the content of our Learner object for production: . In [0]: learn.export() . This will create a file named ‘export.pkl’ in the directory where we were working that contains everything we need to deploy our model (the model, the weights but also some metadata like the classes or the transforms/normalization used). . You probably want to use CPU for inference, except at massive scale (and you almost certainly don’t need to train in real-time). If you don’t have a GPU that happens automatically. You can test your model on CPU like so: . In [0]: defaults.device = torch.device(&#39;cpu&#39;) In [0]: img = open_image(path/&#39;download.jpg&#39;) img Out[0]: . We create our Learner in production enviromnent like this, just make sure that path contains the file ‘export.pkl’ from before. . In [0]: In [0]: learn = load_learner(path) In [0]: pred_class,pred_idx,outputs = learn.predict(img) pred_class Out[0]: Category panamera . So you might create a route something like this (thanks to Simon Willison for the structure of this code): . @app.route(&quot;/classify-url&quot;, methods=[&quot;GET&quot;]) async def classify_url(request): bytes = await get_bytes(request.query_params[&quot;url&quot;]) img = open_image(BytesIO(bytes)) _,_,losses = learner.predict(img) return JSONResponse({ &quot;predictions&quot;: sorted( zip(cat_learner.data.classes, map(float, losses)), key=lambda p: p[1], reverse=True ) }) (This example is for the Starlette web app toolkit.) . Things that can go wrong . Most of the time things will train fine with the defaults There’s not much you really need to tune (despite what you’ve heard!) Most likely are Learning rate Number of epochs . Learning rate (LR) too high . In [0]: learn = cnn_learner(data, models.resnet34, metrics=error_rate) In [0]: learn.fit_one_cycle(1, max_lr=0.5) . Total time: 00:13 epoch train_loss valid_loss error_rate 1 12.220007 1144188288.000000 0.765957 (00:13) . Learning rate (LR) too low . In [0]: learn = cnn_learner(data, models.resnet34, metrics=error_rate) . Previously we had this result: . Total time: 00:57 epoch | train_loss | valid_loss | error_rate —– | ———- | ———- | ———- 1 | 1.030236 | 0.179226 | 0.028369 | (00:14) 2 | 0.561508 | 0.055464 | 0.014184 | (00:13) 3 | 0.396103 | 0.053801 | 0.014184 | (00:13) 4 | 0.316883 | 0.050197 | 0.021277 | (00:15) . In [0]: learn.fit_one_cycle(5, max_lr=1e-5) . Total time: 01:07 epoch | train_loss | valid_loss | error_rate —– | ———- | ———– | ———– 1 | 1.349151 | 1.062807 | 0.609929 | (00:13) 2 | 1.373262 | 1.045115 | 0.546099 | (00:13) 3 | 1.346169 | 1.006288 | 0.468085 | (00:13) 4 | 1.334486 | 0.978713 | 0.453901 | (00:13) 5 | 1.320978 | 0.978108 | 0.446809 | (00:13) . In [0]: learn.recorder.plot_losses() . As well as taking a really long time, it’s getting too many looks at each image, so may overfit. . Too few epochs . In [0]: learn = cnn_learner(data, models.resnet34, metrics=error_rate, pretrained=False) In [0]: learn.fit_one_cycle(1) . Total time: 00:14 epoch train_loss valid_loss error_rate 1 0.602823 0.119616 0.049645 (00:14) . Too many epochs . In [0]: np.random.seed(42) data = ImageDataBunch.from_folder(path, train=&quot;.&quot;, valid_pct=0.9, bs=32, ds_tfms=get_transforms(do_flip=False, max_rotate=0, max_zoom=1, max_lighting=0, max_warp=0 ),size=224, num_workers=4).normalize(imagenet_stats) In [0]: learn = cnn_learner(data, models.resnet50, metrics=error_rate, ps=0, wd=0) learn.unfreeze() In [0]: learn.fit_one_cycle(40, slice(1e-6,1e-4)) Total time: 06:39 . epoch train_loss valid_loss error_rate   . 1 | 1.513021 | 1.041628 | 0.507326 | (00:13) | . 2 | 1.290093 | 0.994758 | 0.443223 | (00:09) | . 3 | 1.185764 | 0.936145 | 0.410256 | (00:09) | . 4 | 1.117229 | 0.838402 | 0.322344 | (00:09) | . 5 | 1.022635 | 0.734872 | 0.252747 | (00:09) | . 6 | 0.951374 | 0.627288 | 0.192308 | (00:10) | . 7 | 0.916111 | 0.558621 | 0.184982 | (00:09) | . 8 | 0.839068 | 0.503755 | 0.177656 | (00:09) | . 9 | 0.749610 | 0.433475 | 0.144689 | (00:09) | . 10 | 0.678583 | 0.367560 | 0.124542 | (00:09) | . 11 | 0.615280 | 0.327029 | 0.100733 | (00:10) | . 12 | 0.558776 | 0.298989 | 0.095238 | (00:09) | . 13 | 0.518109 | 0.266998 | 0.084249 | (00:09) | . 14 | 0.476290 | 0.257858 | 0.084249 | (00:09) | . 15 | 0.436865 | 0.227299 | 0.067766 | (00:09) | . 16 | 0.457189 | 0.236593 | 0.078755 | (00:10) | . 17 | 0.420905 | 0.240185 | 0.080586 | (00:10) | . 18 | 0.395686 | 0.255465 | 0.082418 | (00:09) | . 19 | 0.373232 | 0.263469 | 0.080586 | (00:09) | . 20 | 0.348988 | 0.258300 | 0.080586 | (00:10) | . 21 | 0.324616 | 0.261346 | 0.080586 | (00:09) | . 22 | 0.311310 | 0.236431 | 0.071429 | (00:09) | . 23 | 0.328342 | 0.245841 | 0.069597 | (00:10) | . 24 | 0.306411 | 0.235111 | 0.064103 | (00:10) | . 25 | 0.289134 | 0.227465 | 0.069597 | (00:09) | . 26 | 0.284814 | 0.226022 | 0.064103 | (00:09) | . 27 | 0.268398 | 0.222791 | 0.067766 | (00:09) | . 28 | 0.255431 | 0.227751 | 0.073260 | (00:10) | . 29 | 0.240742 | 0.235949 | 0.071429 | (00:09) | . 30 | 0.227140 | 0.225221 | 0.075092 | (00:09) | . 31 | 0.213877 | 0.214789 | 0.069597 | (00:09) | . 32 | 0.201631 | 0.209382 | 0.062271 | (00:10) | . 33 | 0.189988 | 0.210684 | 0.065934 | (00:09) | . 34 | 0.181293 | 0.214666 | 0.073260 | (00:09) | . 35 | 0.184095 | 0.222575 | 0.073260 | (00:09) | . 36 | 0.194615 | 0.229198 | 0.076923 | (00:10) | . 37 | 0.186165 | 0.218206 | 0.075092 | (00:09) | . 38 | 0.176623 | 0.207198 | 0.062271 | (00:10) | . 39 | 0.166854 | 0.207256 | 0.065934 | (00:10) | . 40 | 0.162692 | 0.206044 | 0.062271 | (00:09) | .",
            "url": "/markdown/2020/04/04/porsche_classifier.html",
            "relUrl": "/markdown/2020/04/04/porsche_classifier.html",
            "date": " • Apr 4, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Text-Classifier-ML",
            "content": "Text-Classifier-ML . Basic text classifier that uses tensor-flow and keras api inorder to classify text as: . 1.) Positive . 2.) Negative . Trained on the IMDB Movie Review dataset . from __future__ import absolute_import, division, print_function import tensorflow as tf from tensorflow import keras import numpy as np import os import random print(tf.__version__) imdb = keras.datasets.imdb # save np.load np_load_old = np.load # modify the default parameters of np.load np.load = lambda *a,**k: np_load_old(*a, allow_pickle=True, **k) # call load_data with allow_pickle implicitly set to true (train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000) # restore np.load for future normal usage np.load = np_load_old print(&quot;Training entries: {}, labels: {}&quot;.format(len(train_data), len(train_labels))) print(train_data[0]) len(train_data[0]), len(train_data[1]) # A dictionary mapping words to an integer index word_index = imdb.get_word_index() # The first indices are reserved word_index = {k:(v+3) for k,v in word_index.items()} word_index[&quot;&lt;PAD&gt;&quot;] = 0 word_index[&quot;&lt;START&gt;&quot;] = 1 word_index[&quot;&lt;UNK&gt;&quot;] = 2 # unknown word_index[&quot;&lt;UNUSED&gt;&quot;] = 3 reverse_word_index = dict([(value, key) for (key, value) in word_index.items()]) def decode_review(text): return &#39; &#39;.join([reverse_word_index.get(i, &#39;?&#39;) for i in text]) decode_review(train_data[0]) train_data = keras.preprocessing.sequence.pad_sequences(train_data, value=word_index[&quot;&lt;PAD&gt;&quot;], padding=&#39;post&#39;, maxlen=256) test_data = keras.preprocessing.sequence.pad_sequences(test_data, value=word_index[&quot;&lt;PAD&gt;&quot;], padding=&#39;post&#39;, maxlen=256) len(train_data[0]), len(train_data[1]) print(train_data[0]) # input shape is the vocabulary count used for the movie reviews (10,000 words) vocab_size = 10000 model = keras.Sequential() model.add(keras.layers.Embedding(vocab_size, 16)) model.add(keras.layers.GlobalAveragePooling1D()) model.add(keras.layers.Dense(16, activation=tf.nn.relu)) model.add(keras.layers.Dense(1, activation=tf.nn.sigmoid)) model.summary() model.compile(optimizer=&#39;adam&#39;, loss=&#39;binary_crossentropy&#39;, metrics=[&#39;acc&#39;]) x_val = train_data[:10000] partial_x_train = train_data[10000:] y_val = train_labels[:10000] partial_y_train = train_labels[10000:] history = model.fit(partial_x_train, partial_y_train, epochs=40, batch_size=512, validation_data=(x_val, y_val), verbose=1) results = model.evaluate(test_data, test_labels) print(results) history_dict = history.history history_dict.keys() import matplotlib.pyplot as plt acc = history_dict[&#39;acc&#39;] val_acc = history_dict[&#39;val_acc&#39;] loss = history_dict[&#39;loss&#39;] val_loss = history_dict[&#39;val_loss&#39;] epochs = range(1, len(acc) + 1) # &quot;bo&quot; is for &quot;blue dot&quot; plt.plot(epochs, loss, &#39;bo&#39;, label=&#39;Training loss&#39;) # b is for &quot;solid blue line&quot; plt.plot(epochs, val_loss, &#39;b&#39;, label=&#39;Validation loss&#39;) plt.title(&#39;Training and validation loss&#39;) plt.xlabel(&#39;Epochs&#39;) plt.ylabel(&#39;Loss&#39;) plt.legend() plt.show() plt.clf() # clear figure plt.plot(epochs, acc, &#39;bo&#39;, label=&#39;Training acc&#39;) plt.plot(epochs, val_acc, &#39;b&#39;, label=&#39;Validation acc&#39;) plt.title(&#39;Training and validation accuracy&#39;) plt.xlabel(&#39;Epochs&#39;) plt.ylabel(&#39;Accuracy&#39;) plt.legend() plt.show() . Training and Validation Loss . Training and Validation Accuracy .",
            "url": "/markdown/2019/06/16/Text_Classifier_ML.html",
            "relUrl": "/markdown/2019/06/16/Text_Classifier_ML.html",
            "date": " • Jun 16, 2019"
        }
        
    
  
    
        ,"post5": {
            "title": "Clothing Classifier",
            "content": "Clothing Classifier . Basic classifier that is trained to classify images of clothing into 10 categories . Trained using FashionMNIST data set consisting of 60,000 labelled images, each of 25px x 25px size . Tested on 10,000 labelled images, which werent part of the training set. . This classifier has close to ~80% accuracy on grayscale images of 25px x 25px size. . Uses tensorflow, keras api, numpy, matplotlib and the Fashion MNIST datsset. . Deployed tf.train.AdamOptimizer, and the sparse_categorical_crossentropy loss function while compiling model. . model.compile(optimizer=&#39;adam&#39;, loss=&#39;sparse_categorical_crossentropy&#39;, metrics=[&#39;accuracy&#39;]) . Uses three neural layers: . model = keras.Sequential([ keras.layers.Flatten(input_shape=(28, 28)), keras.layers.Dense(128, activation=tf.nn.relu), keras.layers.Dense(10, activation=tf.nn.softmax) ]) . from __future__ import absolute_import, division, print_function, unicode_literals # TensorFlow and tf.keras import tensorflow as tf from tensorflow import keras # Helper libraries import numpy as np import matplotlib.pyplot as plt print(tf.__version__) fashion_mnist = keras.datasets.fashion_mnist (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data() class_names = [&#39;T-shirt/top&#39;, &#39;Trouser&#39;, &#39;Pullover&#39;, &#39;Dress&#39;, &#39;Coat&#39;, &#39;Sandal&#39;, &#39;Shirt&#39;, &#39;Sneaker&#39;, &#39;Bag&#39;, &#39;Ankle boot&#39;] train_images.shape len(train_labels) train_labels test_images.shape len(test_labels) plt.figure() plt.imshow(train_images[0]) plt.colorbar() plt.grid(False) plt.show() train_images = train_images / 255.0 test_images = test_images / 255.0 plt.figure(figsize=(10,10)) for i in range(25): plt.subplot(5,5,i+1) plt.xticks([]) plt.yticks([]) plt.grid(False) plt.imshow(train_images[i], cmap=plt.cm.binary) plt.xlabel(class_names[train_labels[i]]) plt.show() model = keras.Sequential([ keras.layers.Flatten(input_shape=(28, 28)), keras.layers.Dense(128, activation=tf.nn.relu), keras.layers.Dense(10, activation=tf.nn.softmax) ]) model.compile(optimizer=&#39;adam&#39;, loss=&#39;sparse_categorical_crossentropy&#39;, metrics=[&#39;accuracy&#39;]) model.fit(train_images, train_labels, epochs=5) test_loss, test_acc = model.evaluate(test_images, test_labels) print(&#39;Test accuracy:&#39;, test_acc) predictions = model.predict(test_images) predictions[0] np.argmax(predictions[0]) test_labels[0] def plot_image(i, predictions_array, true_label, img): predictions_array, true_label, img = predictions_array[i], true_label[i], img[i] plt.grid(False) plt.xticks([]) plt.yticks([]) plt.imshow(img, cmap=plt.cm.binary) predicted_label = np.argmax(predictions_array) if predicted_label == true_label: color = &#39;blue&#39; else: color = &#39;red&#39; plt.xlabel(&quot;{} {:2.0f}% ({})&quot;.format(class_names[predicted_label], 100*np.max(predictions_array), class_names[true_label]), color=color) def plot_value_array(i, predictions_array, true_label): predictions_array, true_label = predictions_array[i], true_label[i] plt.grid(False) plt.xticks([]) plt.yticks([]) thisplot = plt.bar(range(10), predictions_array, color=&quot;#777777&quot;) plt.ylim([0, 1]) predicted_label = np.argmax(predictions_array) thisplot[predicted_label].set_color(&#39;red&#39;) thisplot[true_label].set_color(&#39;blue&#39;) i = 0 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions, test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions, test_labels) plt.show() i = 12 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions, test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions, test_labels) plt.show() # Plot the first X test images, their predicted label, and the true label # Color correct predictions in blue, incorrect predictions in red num_rows = 5 num_cols = 3 num_images = num_rows*num_cols plt.figure(figsize=(2*2*num_cols, 2*num_rows)) for i in range(num_images): plt.subplot(num_rows, 2*num_cols, 2*i+1) plot_image(i, predictions, test_labels, test_images) plt.subplot(num_rows, 2*num_cols, 2*i+2) plot_value_array(i, predictions, test_labels) plt.show() # Grab an image from the test dataset img = test_images[0] print(img.shape) # Add the image to a batch where it&#39;s the only member. img = (np.expand_dims(img,0)) print(img.shape) predictions_single = model.predict(img) print(predictions_single) plot_value_array(0, predictions_single, test_labels) _ = plt.xticks(range(10), class_names, rotation=45) np.argmax(predictions_single[0]) .",
            "url": "/markdown/2019/06/15/clothing_classifier.html",
            "relUrl": "/markdown/2019/06/15/clothing_classifier.html",
            "date": " • Jun 15, 2019"
        }
        
    
  
    
        ,"post6": {
            "title": "Smart Presence Sensing System - IoT enabled Smart Building",
            "content": "Smart Presence Sensing System - IoT enabled Smart Building . Automated Smart Building using IoT . This repository contains the Arudino sketch for the automated smart building project. . The sketch is written in C++. . Replace your ssid and pass where asked. . Enter your ThingSpeak channel’s API WRITE KEY in the updateTS function in place of “xxx” . #include&lt;SoftwareSerial.h&gt; //include library int data; int data1; boolean lock = true; int counter = 0; int Light_status = 10; SoftwareSerial esp8266(3,4); //set the software serial pins RX=3, TX=4 //definition of variables #define SSID &quot;xxx&quot; //replace with ssid of wifi #define PASS &quot;xxx&quot; //replace with password of wifi String sendAT(String command, const int timeout) { String response=&quot;&quot;; esp8266.print(command); long int time = millis(); while((time + timeout) &gt; millis()){ while(esp8266.available()){ char c = esp8266.read(); response += c; } } Serial.print(response); return response; } void connectwifi(){ sendAT(&quot;AT r n&quot;,1000); // sendAT(&quot;AT+CWMODE=1 r n&quot;,1000); //call sendAT function to set esp8266 to station mode sendAT(&quot;AT+CWJAP= &quot;&quot;SSID&quot; &quot;, &quot;&quot;PASS&quot; &quot; r n&quot;,2000); //AT command to connect with the wifi network while(!esp8266.find(&quot;OK&quot;)){ //wait for connection } sendAT(&quot;AT+CIFSR r n&quot;,1000); //AT command to print IP address on serial monitor sendAT(&quot;AT+CIPMUX=0 r n&quot;,1000); //AT command to set esp8266 to multiple connections } void setup() { // put your setup code here, to run once: Serial.begin(9600); //begin the serial communication with baud rate 9600 esp8266.begin(9600); sendAT(&quot;AT+RST r n&quot;,2000); //call sendAT function to send reset AT command connectwifi(); //call connectwifi function to connect to wifi pinMode(10,INPUT); pinMode(11,INPUT); pinMode(8,OUTPUT); pinMode(13,OUTPUT); pinMode(12,OUTPUT); Serial.print(&quot;Calibrating sensor&quot;); for(int i=0;i&lt;30;i++){ Serial.print(&quot;.&quot;); delay(1000); } Serial.println(&quot;done&quot;); Serial.println(&quot;Sensor active&quot;); digitalWrite(13,HIGH); digitalWrite(12,HIGH); delay(2000); digitalWrite(12,LOW); delay(50); } void loop() { // put your main code here, to run repeatedly: data = digitalRead(10); data1 = digitalRead(11); boolean lock=true; if(data==HIGH&amp;&amp;lock==true){ lock=false; digitalWrite(12,HIGH); delay(500); digitalWrite(12,LOW); Serial.print(&quot;sensor IN&quot;); counter++; if(counter&gt;0){ digitalWrite(8,HIGH); Light_status=100; passTS(counter,Light_status); } delay(4000); lock=true; } if(data1==HIGH&amp;&amp;lock==true){ lock=false; digitalWrite(12,HIGH); delay(500); digitalWrite(12,LOW); Serial.println(&quot;sensor OUT&quot;); counter--; if(counter==0){ digitalWrite(8,LOW); Light_status=10; } passTS(counter,Light_status); delay(4000); lock=true; } } void passTS(int c, int l){ String counter1 = String(c); //convert int to str data type Serial.print(&quot;Number of persons:&quot;); Serial.println(c); String Light_status1 = String(l); Serial.print(&quot;Light status:&quot;); Serial.println(l); updateTS(counter1,Light_status1); delay(3000); } void updateTS(String C, String L) { Serial.println(&quot;&quot;); sendAT(&quot;AT+CIPSTART= &quot;TCP &quot;, &quot;api.thingspeak.com &quot;,80 r n&quot;,1000); delay(2000); String cmdlen; String cmd = &quot;GET /update?key=xxx&amp;field1=&quot;+C+&quot;&amp;field2=&quot;+L+&quot; r n&quot;; cmdlen = cmd.length(); sendAT(&quot;AT+CIPSEND=&quot;+cmdlen+&quot; r n&quot;,2000); esp8266.print(cmd); Serial.println(&quot;&quot;); sendAT(&quot;AT+CIPCLOSE r n&quot;,2000); Serial.println(&quot;&quot;); delay(1000); } .",
            "url": "/markdown/2019/05/28/smart_building.html",
            "relUrl": "/markdown/2019/05/28/smart_building.html",
            "date": " • May 28, 2019"
        }
        
    
  
    
        ,"post7": {
            "title": "Automated Weather Monitor using Arduino - an IoT Implementation",
            "content": "Automated Weather Monitor using Arduino - an IoT Implementation . Automated Smart Weather Monitor using IoT . This repository contains the Arudino sketch for the automated smart weather monitor project. . The sketch is written in C++. . Replace your ssid and pass where asked. . Enter your ThingSpeak channel’s API WRITE KEY in the updateTS function in place of “xxx” . #include &lt;dht.h&gt; #include &lt;SoftwareSerial.h&gt; dht DHT; String temp; String humid; SoftwareSerial esp8266(3,4); #define SSID &quot;xxx&quot; #define PASS &quot;xxx&quot; String sendAT(String command, const int timeout) { String response = &quot;&quot;; esp8266.print(command); long int time = millis(); while((time + timeout) &gt; millis()) { while(esp8266.available()) { char c = esp8266.read(); response += c; } } Serial.print(response); return response; } void setup() { // put your setup code here, to run once: Serial.begin(9600); esp8266.begin(9600); Serial.println(&quot;Weather Monitor&quot;); sendAT(&quot;AT+RST r n&quot;,2000); sendAT(&quot;AT r n&quot;,1000); sendAT(&quot;AT+CWMODE=1 r n&quot;,1000); sendAT(&quot;AT+CWJAP= &quot;&quot;SSID&quot; &quot;, &quot;&quot;PASS&quot; &quot; r n&quot;,2000); while(!esp8266.find(&quot;OK&quot;)) { } sendAT(&quot;AT+CIFSR r n&quot;,1000); sendAT(&quot;AT+CIPMUX=0 r n&quot;,1000); } void loop() { // put your main code here, to run repeatedly: int tempdata = DHT.read11(5); Serial.print(&quot;Temperature = &quot;); Serial.print(DHT.temperature); Serial.print(&quot; t&quot;); Serial.print(&quot;Humidity = &quot;); Serial.println(DHT.humidity); temp = DHT.temperature; humid = DHT.humidity; updateTS(temp,humid); delay(3000); } void updateTS(String T, String H) { Serial.println(&quot;&quot;); sendAT(&quot;AT+CIPSTART= &quot;TCP &quot;, &quot;api.thingspeak.com &quot;,80 r n&quot;,1000); delay(2000); String cmdlen; String cmd = &quot;GET /update?key=xxx&amp;field1=&quot;+T+&quot;&amp;field2=&quot;+H+&quot; r n&quot;; cmdlen = cmd.length(); sendAT(&quot;AT+CIPSEND=&quot;+cmdlen+&quot; r n&quot;,2000); esp8266.print(cmd); Serial.println(&quot;&quot;); sendAT(&quot;AT+CIPCLOSE r n&quot;,2000); delay(15000); } .",
            "url": "/markdown/2019/05/25/weather_monitor.html",
            "relUrl": "/markdown/2019/05/25/weather_monitor.html",
            "date": " • May 25, 2019"
        }
        
    
  
    
        ,"post8": {
            "title": "Automated Street Lighting using Arduino - An IoT implementation",
            "content": "Automated Street Lighting using Arduino - An IoT implementation . Automatic street lighting system which senses amount of ambient light and accordingly switches on/off lights. Built using . an Arduino Uno and | a Raspberry Pi 3B+. | . The status of the entire system is updated in real-time onto a cloud based IoT dashboard(ThingSpeak) which can be monitored from anywhere in the world. . This repository contains the Arudino sketch for the automated street lighting project. . The sketch is written in C++. . Replace your ssid and pass where asked. . Enter your ThingSpeak channel’s API WRITE KEY in the updateTS function in place of “xxx” . #include&lt;SoftwareSerial.h&gt; //include the software serial library int sensor; //varialbe to store sensor values int data; //variable to store mapped sensro values int Light_status=10; //var to store light status values int threshold=38; SoftwareSerial esp8266(3,4); //set the software serial pins RX=3, TX=4 //definition of variables #define SSID &quot;xxx&quot; //replace with ssid of wifi #define PASS &quot;xxx&quot; //replace with password of wifi String sendAT(String command, const int timeout) { String response=&quot;&quot;; esp8266.print(command); long int time = millis(); while((time + timeout) &gt; millis()){ while(esp8266.available()){ char c = esp8266.read(); response += c; } } Serial.print(response); return response; } void connectwifi(){ sendAT(&quot;AT r n&quot;,1000); // sendAT(&quot;AT+CWMODE=1 r n&quot;,1000); //call sendAT function to set esp8266 to station mode sendAT(&quot;AT+CWJAP= &quot;&quot;SSID&quot; &quot;, &quot;&quot;PASS&quot; &quot; r n&quot;,2000); //AT command to connect with the wifi network while(!esp8266.find(&quot;OK&quot;)){ //wait for connection } sendAT(&quot;AT+CIFSR r n&quot;,1000); //AT command to print IP address on serial monitor sendAT(&quot;AT+CIPMUX=0 r n&quot;,1000); //AT command to set esp8266 to multiple connections } void setup() { // put your setup code here, to run once: Serial.begin(9600); //begin the serial communication with baud rate 9600 esp8266.begin(9600); sendAT(&quot;AT+RST r n&quot;,2000); //call sendAT function to send reset AT command connectwifi(); //call connectwifi function to connect to wifi pinMode(8,OUTPUT); } void loop() { // put your main code here, to run repeatedly: sensor=analogRead(A0); //read raw sensor data and store it data=map(sensor,0,1023,0,100); //map the raw sensor values and store the result in data if(data&lt;threshold){ //check of sensor value is less than threshold digitalWrite(8,HIGH); //switch on the light Light_status = 100; //update Light status variable to 100 } else{ digitalWrite(8,LOW); //switch off the light Light_status=10; //update the light_status variable to 10 } String sensor_value = String(data); //convert int to str Serial.print(&quot;Light Intensity:&quot;); Serial.println(data); //print lighht status on serial monitor String threshold1= String(threshold); //convert int to str Serial.print(&quot;Threshold:&quot;); Serial.println(threshold); // print threshold on serial monitor updateTS(sensor_value,Light_status,threshold); //call function toupdate Thingspeak delay(3000); } void updateTS(String S,String L, String T){ Serial.println(&quot;&quot;); sendAT(&quot;AT+CIPSTART= &quot;TCP &quot;, &quot;api.thingspeak.com &quot;,80 r n&quot;,1000); delay(2000); String cmdlen; String cmd = &quot;GET /update?key=xxx&amp;field1=&quot;+L+&quot;&amp;field2=&quot;+S+&quot;field3=&quot;+T+&quot; r n&quot;; //update data to thingspeak cmdlen = cmd.length(); sendAT(&quot;AT+CIPSEND=&quot;+cmdlen+&quot; r n&quot;,2000); esp8266.print(cmd); sendAT(&quot;AT+CIPCLOSE r n&quot;,2000); Serial.println(&quot;&quot;); delay(1000); } .",
            "url": "/markdown/2019/05/25/street_lighting_iot.html",
            "relUrl": "/markdown/2019/05/25/street_lighting_iot.html",
            "date": " • May 25, 2019"
        }
        
    
  
    
        ,"post9": {
            "title": "Smart Water Meter using an Arduino - An IoT Implementation",
            "content": "Smart Water Meter using an Arduino - An IoT Implementation . Smart Water Meter using IoT . The status of the entire system is updated in real-time onto a cloud based IoT dashboard(ThingSpeak) which can be monitored from anywhere in the world. . This repository contains the Arudino sketch for the automated smart water meter project. . The sketch is written in C++. . Replace your ssid and pass where asked. . Enter your ThingSpeak channel’s API WRITE KEY in the updateTS function in place of “xxx” . #include&lt;SoftwareSerial.h&gt; //include the software serial library byte statusLed=13; byte sensorInterrupt=0; //0=digitalpin 2 byte sensorPin=2; //the hall-effect flow sensor outputs approximately 4.5 pulses per sencond per litre/minute of flow float calibrationFactor=4.5; volatile byte pulseCount; float flowRate; unsigned int flowMilliLitres; unsigned long totalMilliLitres; unsigned long oldTime; unsigned int frac; SoftwareSerial esp8266(3,4); //set the software serial pins RX pin =3, TX pin =4 //defination of variables #define SSID &quot;xxx&quot; //replace with ssid of wifi #define PASS &quot;xxx&quot; //replace with password of wifi String sendAT(String command, const int timeout) { String response=&quot;&quot;; esp8266.print(command); long int time = millis(); while((time + timeout) &gt; millis()){ while(esp8266.available()){ char c = esp8266.read(); response += c; } } Serial.print(response); return response; } void connectwifi(){ sendAT(&quot;AT r n&quot;,1000); // sendAT(&quot;AT+CWMODE=1 r n&quot;,1000); //call sendAT function to set esp8266 to station mode sendAT(&quot;AT+CWJAP= &quot;&quot;SSID&quot; &quot;, &quot;&quot;PASS&quot; &quot; r n&quot;,2000); //AT command to connect with the wifi network while(!esp8266.find(&quot;OK&quot;)){ //wait for connection } sendAT(&quot;AT+CIFSR r n&quot;,1000); //AT command to print IP address on serial monitor sendAT(&quot;AT+CIPMUX=0 r n&quot;,1000); //AT command to set esp8266 to multiple connections } void setup() { // put your setup code here, to run once: // initialize a serial connection for reporting values to the host Serial.begin(9600); esp8266.begin(9600); sendAT(&quot;AT+RST r n&quot;,2000); //call sendAT function to send reset AT command connectwifi(); //call connectwifi function to connect to wifi //set up the status LED line as an output pinMode(statusLed,OUTPUT); digitalWrite(statusLed,HIGH); //WE HAVE AN ACTIVE-LOW LED attached pinMode(sensorPin,INPUT); digitalWrite(sensorPin,HIGH); pulseCount=0; flowRate=0.0; flowMilliLitres=0; totalMilliLitres=0; oldTime=0; // The Hall Effect sensor is connected to pin 2 which uses interrupt 0. // configured to trigger on a FALLING change(transition from HIGH to LOW state) attachInterrupt(sensorInterrupt,pulseCounter,FALLING); } /* main progrma loop */ void loop() { // put your main code here, to run repeatedly: if(millis()-oldTime&gt;1000){ //only process counters once per second //Disable the interrupt while calculating flow rate and sending the values to host detachInterrupt(sensorInterrupt); //Because this loop may not complete in exactly 1 second intervals we calculate the number of milliseconds that have passed since the last execution and use //that to scale the output based on the number of pulses per second per units of measure(litres/minute in this case) coming from the sensor flowRate=((1000.0/(millis()-oldTime))*pulseCount)/calibrationFactor; //Note the time this processing pass was executed. //Note that because we have disabled interrupts the //millis() function won&#39;t actually be incrementing //right at this point but it will return the value //it was set to just before interrupts were disabled. oldTime=millis(); //divide the flow rate in litres/minute by 60 to determine how many litres have //passed through the sensor in this 1 second interval, then multiply by 1000 to //convert to millilitres. flowMilliLitres=(flowRate/60)*1000; //add the millilitres passed in this second to the cumulative total totalMilliLitres+=flowMilliLitres; unsigned int frac; //print the flow rate for this second in litres/minute Serial.print(&quot;Flow Rate:&quot;); Serial.print(int(flowRate)); //print the integer part of variable Serial.print(&quot;.&quot;); //print the decimal point //determine the fractional part. The 10 multiplier gives us 1 decimal place. frac =(flowRate-int(flowRate))*10; Serial.print(frac,DEC); //print the fractional part of the variable Serial.print(&quot;L/min&quot;); //print the number of litres flowed in this second Serial.print(&quot;Current Liquid FLowing:&quot;); //output separator Serial.print(flowMilliLitres); Serial.print(&quot;mL/sec&quot;); //print the cumulative total of litres flowed since starting Serial.print(&quot;output Liquid QUantity:&quot;); //output separator Serial.print(totalMilliLitres); Serial.println(&quot;mL&quot;); //reset the pulse counter so we can start incrementing again pulseCount=0; //enable the interrupt again now that we have finished sending output attachInterrupt(sensorInterrupt,pulseCounter,FALLING); } String F = String(frac);//convert float to string datatype String FM = String(flowMilliLitres); // convert int to string datatype String TM = String(totalMilliLitres); //convert long to string datatype updateTS(F,FM,TM);; //call the function to update ThingSpeak channel delay(3000); } /* * * interrupt service routine */ void pulseCounter(){ //increment the pulse counter pulseCount++; } void updateTS(String F,String FM, String TM) { Serial.println(&quot;&quot;); sendAT(&quot;AT+CIPSTART= &quot;TCP &quot;, &quot;api.thingspeak.com &quot;,80 r n&quot;,1000); delay(2000); String cmdlen; String cmd = &quot;GET /update?key=xxx&amp;field1=&quot;+F+&quot;&amp;field2=&quot;+FM+&quot;field3=&quot;+TM+&quot; r n&quot;; //update data to thingspeak cmdlen = cmd.length(); sendAT(&quot;AT+CIPSEND=&quot;+cmdlen+&quot; r n&quot;,2000); esp8266.print(cmd); sendAT(&quot;AT+CIPCLOSE r n&quot;,2000); Serial.println(&quot;&quot;); } .",
            "url": "/markdown/2019/05/23/smart_water_meter.html",
            "relUrl": "/markdown/2019/05/23/smart_water_meter.html",
            "date": " • May 23, 2019"
        }
        
    
  
    
        ,"post10": {
            "title": "Weather Station on NodeMCU",
            "content": "Weather Station on NodeMCU . Smart Weather Monitor Using nodemcu . This repository contains the sketch for the weather monitor using nodemcu project . The sketch is written in C++. . Replace your ssid and pass where asked. . Enter your ThingSpeak channel’s API WRITE KEY in the updateTS function in place of “xxx” . #include &lt;ESP8266WiFi.h&gt; #include &lt;DHT.h&gt; // Including library for dht String apiKey = &quot;xxx&quot;; // Enter your Write API key from ThingSpeak const char *ssid = &quot;xxx&quot;; // replace with your wifi ssid and wpa2 key const char *pass = &quot;xxx&quot;; const char* server = &quot;api.thingspeak.com&quot;; #define DHTPIN 0 //pin where the dht11 is connected DHT dht(DHTPIN, DHT11); WiFiClient client; void setup() { Serial.begin(115200); delay(10); dht.begin(); Serial.println(&quot;Connecting to &quot;); Serial.println(ssid); WiFi.begin(ssid, pass); while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print(&quot;.&quot;); } Serial.println(&quot;&quot;); Serial.println(&quot;WiFi connected&quot;); } void loop() { float h = dht.readHumidity(); float t = dht.readTemperature(); if (isnan(h) || isnan(t)) { Serial.println(&quot;Failed to read from DHT sensor!&quot;); return; } if (client.connect(server,80)) // &quot;184.106.153.149&quot; or api.thingspeak.com { String postStr = apiKey; postStr +=&quot;&amp;field1=&quot;; postStr += String(t); postStr +=&quot;&amp;field2=&quot;; postStr += String(h); postStr += &quot; r n r n&quot;; client.print(&quot;POST /update HTTP/1.1 n&quot;); client.print(&quot;Host: api.thingspeak.com n&quot;); client.print(&quot;Connection: close n&quot;); client.print(&quot;X-THINGSPEAKAPIKEY: &quot;+apiKey+&quot; n&quot;); client.print(&quot;Content-Type: application/x-www-form-urlencoded n&quot;); client.print(&quot;Content-Length: &quot;); client.print(postStr.length()); client.print(&quot; n n&quot;); client.print(postStr); Serial.print(&quot;Temperature: &quot;); Serial.print(t); Serial.print(&quot; degrees Celcius, Humidity: &quot;); Serial.print(h); Serial.println(&quot;%. Send to Thingspeak.&quot;); } client.stop(); Serial.println(&quot;Waiting...&quot;); // thingspeak needs minimum 15 sec delay between updates, i&#39;ve set it to 30 seconds delay(10000); } .",
            "url": "/markdown/2019/04/22/weather_nodemcu.html",
            "relUrl": "/markdown/2019/04/22/weather_nodemcu.html",
            "date": " • Apr 22, 2019"
        }
        
    
  
    
        ,"post11": {
            "title": "Smart Irrigation System using IoT",
            "content": "Smart Irrigation System using IoT . Automated Smart Irrigation system using IoT . This repository contains the Arudino sketch for the automated smart irrigation project using iot. . The sketch is written in C++. . Replace your ssid and pass where asked. . Enter your ThingSpeak channel’s API WRITE KEY in the updateTS function in place of “xxx” . #include &lt;SoftwareSerial.h&gt; int srdata; // variable to store raw sensor data int prdata; // variable to store mapped sensor data int pump_status; SoftwareSerial esp8266(3,4); #define SSID &quot;xxx&quot; #define PASS &quot;xxx&quot; String sendAT(String command, const int timeout) { String response = &quot;&quot;; esp8266.print(command); long int time = millis(); while((time + timeout) &gt; millis()) { while(esp8266.available()) { char c = esp8266.read(); response += c; } } Serial.print(response); return response; } void setup() { // put your setup code here, to run once: Serial.begin(9600); // start the serial communication with baud rate 9600 esp8266.begin(9600); sendAT(&quot;AT+RST r n&quot;,2000); sendAT(&quot;AT r n&quot;,1000); sendAT(&quot;AT+CWMODE=1 r n&quot;,1000); sendAT(&quot;AT+CWJAP= &quot;&quot;SSID&quot; &quot;, &quot;&quot;PASS&quot; &quot; r n&quot;,2000); while(!esp8266.find(&quot;OK&quot;)) { } sendAT(&quot;AT+CIFSR r n&quot;,1000); sendAT(&quot;AT+CIPMUX=0 r n&quot;,1000); pinMode(A0,INPUT); // set the A0 pin as an input pinMode(8, OUTPUT); } void loop() { // put your main code here, to run repeatedly: srdata=analogRead(A0); // read the sensor data and store it in srdata variable prdata=map(srdata,0,1023,100,0); // map the sensor data to range 0 to 100 using y=map(x,from low,from high, to low, to high) syntax Serial.print(&quot;Sensor Data:&quot;); // Print the words &quot;Sensor Data:&quot; on serial monitor Serial.println(prdata); // Print the map sensor data on the serial monitor String sensor_value = String(prdata); if(prdata &lt; 50) { digitalWrite(8,LOW); pump_status = 100; } else { digitalWrite(8,HIGH); pump_status = 0; } String pump = String(pump_status); updateTS(sensor_value,pump); delay(2000); // set a delay of 2 seconds before the next sensor data is fetched } void updateTS(String T, String P) { Serial.println(&quot;&quot;); sendAT(&quot;AT+CIPSTART= &quot;TCP &quot;, &quot;api.thingspeak.com &quot;,80 r n&quot;,1000); delay(2000); String cmdlen; String cmd = &quot;GET /update?key=xxx&amp;field1=&quot;+T+&quot;&amp;field2=&quot;+P+&quot; r n&quot;; cmdlen = cmd.length(); sendAT(&quot;AT+CIPSEND=&quot;+cmdlen+&quot; r n&quot;,2000); esp8266.print(cmd); Serial.println(&quot;&quot;); sendAT(&quot;AT+CIPCLOSE r n&quot;,2000); Serial.println(&quot;&quot;); delay(15000); } .",
            "url": "/markdown/2019/04/21/smart_irrigation.html",
            "relUrl": "/markdown/2019/04/21/smart_irrigation.html",
            "date": " • Apr 21, 2019"
        }
        
    
  
    
        ,"post12": {
            "title": "NSE Stock Analysis using ML",
            "content": "NSE Stock Analysis using ML . NSE-Stock OHLC, Adjusted Close &amp; Trading Volume Scraping and Algorithmic Analysis . Configured for the Nifty 500 stocks. . Uses pandas, matplotlib, mpl_finance, scikit-learn and the AlphaVantage Stock Market API . Written entirely in python. . import bs4 as bs import pickle import requests import os import pandas_datareader.data as web import datetime as dt import matplotlib.pyplot as plt from matplotlib import style import datetime as dt import numpy as np import csv import urllib.request, json from collections import Counter import pandas as pd from sklearn import model_selection as cross_validation from sklearn import svm, neighbors from sklearn.model_selection import cross_validate from sklearn.ensemble import VotingClassifier, RandomForestClassifier from statistics import mean from sklearn.model_selection import train_test_split style.use(&#39;ggplot&#39;) &#39;&#39;&#39;def save_sensex_tickers(): resp = requests.get(&#39;https://en.wikipedia.org/wiki/BSE_SENSEX&#39;) soup = bs.BeautifulSoup(resp.text, &#39;lxml&#39;) table = soup.find(&#39;table&#39;, {&#39;class&#39;: &#39;wikitable sortable&#39;}) tickers = [] for row in table.findAll(&#39;tr&#39;)[1:]: ticker = row.findAll(&#39;td&#39;)[1].text.replace(&#39;.&#39;,&#39;-&#39;) tickers.append(ticker) with open(&quot;sensextickers.pickle&quot;,&quot;wb&quot;) as f: pickle.dump(tickers,f) print(tickers) return tickers save_sensex_tickers() &#39;&#39;&#39; # save sensex_tickers() def convert_to_list(): with open(&#39;ind_nifty500list.csv&#39;, &#39;r&#39;) as f: reader = csv.reader(f) scrips = list(reader) tickers = [] for i in range(len(scrips)): tickers.append(scrips[i][1]) del tickers[0] for ticker in tickers: ticker = ticker.replace(&#39;.&#39;,&#39;-&#39;).strip() tickers = [&#39;NSE:&#39;+ x for x in tickers] outfile = open(&quot;nse_500_tickers.pickle&quot;,&quot;wb&quot;) pickle.dump(tickers,outfile) outfile.close() return tickers #convert_to_list() def get_data_from_av(reload_sensex=False): if reload_sensex: tickers = convert_to_list() else: with open(&quot;nse_500_tickers.pickle&quot;, &quot;rb&quot;) as f: tickers = pickle.load(f) if not os.path.exists(&#39;stocks_dfs&#39;): os.makedirs(&#39;stocks_dfs&#39;) start = dt.datetime(2019, 6, 12) end = dt.datetime.now() api_key = &#39;xxx&#39; tick_names = [s.replace(&#39;:&#39;, &#39;-&#39;) for s in tickers] for ticker in tickers: try: url_string = &quot;https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&amp;symbol=%s&amp;outputsize=full&amp;apikey=%s&quot;%(ticker,api_key) file_to_save = &#39;stock_dfs/%s.csv&#39;%ticker.replace(&#39;:&#39;,&#39;-&#39;) print(ticker) if not os.path.exists(file_to_save): with urllib.request.urlopen(url_string) as url: data = json.loads(url.read().decode()) # extract stock market data data = data[&#39;Time Series (Daily)&#39;] df = pd.DataFrame(columns=[&#39;Date&#39;,&#39;Low&#39;,&#39;High&#39;,&#39;Close&#39;,&#39;Open&#39;]) for k,v in data.items(): date = dt.datetime.strptime(k, &#39;%Y-%m-%d&#39;) data_row = [date.date(),float(v[&#39;3. low&#39;]),float(v[&#39;2. high&#39;]), float(v[&#39;4. close&#39;]),float(v[&#39;1. open&#39;])] df.loc[-1,:] = data_row df.index = df.index + 1 print(&#39;Data saved to : %s&#39;%file_to_save) df.to_csv(file_to_save) except: pass #get_data_from_av(True) def compile_data(): with open(&#39;nse_500_tickers.pickle&#39;, &#39;rb&#39;) as f: tickers = pickle.load(f) tickers = [s.replace(&#39;:&#39;,&#39;-&#39;) for s in tickers] # print(tickers[:10]) main_df = pd.DataFrame() for count,ticker in enumerate(tickers): df = pd.read_csv(&#39;stock_dfs/{}.csv&#39;.format(ticker)) df.set_index(&#39;Date&#39;,inplace=True) #df[&#39;{}_HL_pct_diff&#39;.format(ticker)] = (df[&#39;High&#39;] - df[&#39;Low&#39;]) / df[&#39;Low&#39;] #df[&#39;{}_daily_pct_chng&#39;.format(ticker)] = (df[&#39;Close&#39;] - df[&#39;Open&#39;]) / df[&#39;Open&#39;] df.rename(columns={&#39;Adj Close&#39;:ticker}, inplace=True) df.drop([&#39;Open&#39;,&#39;High&#39;,&#39;Low&#39;,&#39;Volume&#39;, &#39;Close&#39;,&#39;Unnamed: 0&#39;],1,inplace=True) if main_df.empty: main_df = df else: main_df = main_df.join(df, how=&#39;outer&#39;) if count % 10 == 0: print(count) print(main_df.head()) main_df.to_csv(&#39;nse_500_tickers_joined_closes.csv&#39;) #compile_data() def visualize_data(): df = pd.read_csv(&#39;nse_500_tickers_joined_closes.csv&#39;) df[&#39;NSE-TCS&#39;].plot() plt.show df_corr = df.corr() print(df_corr.head()) df_corr.to_csv(&#39;nsecorr.csv&#39;) data1 = df_corr.values fig1 = plt.figure() ax1 = fig1.add_subplot(111) heatmap1 = ax1.pcolor(data1, cmap=plt.cm.RdYlGn) fig1.colorbar(heatmap1) ax1.set_xticks(np.arange(data1.shape[1]) + 0.5, minor=False) ax1.set_yticks(np.arange(data1.shape[0]) + 0.5, minor=False) ax1.invert_yaxis() ax1.xaxis.tick_top() column_labels = df_corr.columns row_labels = df_corr.index ax1.set_xticklabels(column_labels) ax1.set_yticklabels(row_labels) plt.xticks(rotation=90) heatmap1.set_clim(-1,1) plt.tight_layout() #plt.savefig(&#39;correlantions.png&#39;, dpi=(300)) plt.show() #visualize_data() def process_data_for_labels(ticker): hm_days = 7 df = pd.read_csv(&#39;nse_500_tickers_joined_closes.csv&#39;, index_col=0) tickers = df.columns.values.tolist() df.fillna(0, inplace=True) for i in range(1,hm_days+1): df[&#39;{}_{}d&#39;.format(ticker,i)] = (df[ticker].shift(-i) - df[ticker]) / df[ticker] df.fillna(0, inplace=True) return tickers, df def buy_sell_hold(*args): cols = [c for c in args] requirement = 0.02 for col in cols: if col &gt; requirement: return 1 if col &lt; -requirement: return -1 return 0 def extract_featuresets(ticker): tickers, df = process_data_for_labels(ticker) df[&#39;{}_target&#39;.format(ticker)] = list(map(buy_sell_hold, df[&#39;{}_1d&#39;.format(ticker)], df[&#39;{}_2d&#39;.format(ticker)], df[&#39;{}_3d&#39;.format(ticker)], df[&#39;{}_4d&#39;.format(ticker)], df[&#39;{}_5d&#39;.format(ticker)], df[&#39;{}_6d&#39;.format(ticker)], df[&#39;{}_7d&#39;.format(ticker)] )) vals = df[&#39;{}_target&#39;.format(ticker)].values.tolist() str_vals = [str(i) for i in vals] print(&#39;Data spread:&#39;,Counter(str_vals)) df.fillna(0, inplace=True) df = df.replace([np.inf, -np.inf], np.nan) df.dropna(inplace=True) df_vals = df[[ticker for ticker in tickers]].pct_change() df_vals = df_vals.replace([np.inf, -np.inf], 0) df_vals.fillna(0, inplace=True) X = df_vals.values y = df[&#39;{}_target&#39;.format(ticker)].values return X, y, df def do_ml(ticker): X, y, df = extract_featuresets(ticker) X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25) #K Nearest Neighbors #clf = neighbors.KNeighborsClassifier() # VotingClassifier clf = VotingClassifier([(&#39;lsvc&#39;, svm.LinearSVC(max_iter=2000)), (&#39;knn&#39;, neighbors.KNeighborsClassifier()), (&#39;rfor&#39;, RandomForestClassifier())]) clf.fit(X_train, y_train) confidence = clf.score(X_test, y_test) print(&#39;accuracy:&#39;,confidence) predictions = clf.predict(X_test) print(&#39;predicted class counts: &#39;, Counter(predictions)) print() print() # return confidence # testcases running: do_ml(&#39;NSE-TCS&#39;) do_ml(&#39;NSE-M&amp;M&#39;) do_ml(&#39;NSE-ABB&#39;) &#39;&#39;&#39; with open(&quot;nse_500_tickers.pickle&quot;, &quot;rb&quot;) as f: tickers = pickle.load(f) accuracies =[] for count,ticker in enumerate(tickers): if count%10==0: print(count) accuracy = do_ml(ticker) accuracies.append(accuracy) print(&#39;{} accuracy: {}. Average accuracy:{}&#39;.format(ticker,accuracy,mean(accuracies))) &#39;&#39;&#39; . Nifty500 list . Company Name Industry Symbol Series ISIN Code . 3M India Ltd. | SERVICES | 3MINDIA | EQ | INE470A01017 | . ABB India Ltd. | INDUSTRIAL MANUFACTURING | ABB | EQ | INE117A01022 | . ACC Ltd. | CEMENT &amp; CEMENT PRODUCTS | ACC | EQ | INE012A01025 | . AIA Engineering Ltd. | INDUSTRIAL MANUFACTURING | AIAENG | EQ | INE212H01026 | . APL Apollo Tubes Ltd. | METALS | APLAPOLLO | EQ | INE702C01019 | . AU Small Finance Bank Ltd. | FINANCIAL SERVICES | AUBANK | EQ | INE949L01017 | . Aavas Financiers Ltd. | FINANCIAL SERVICES | AAVAS | EQ | INE216P01012 | . Adani Green Energy Ltd. | ENERGY | ADANIGREEN | EQ | INE364U01010 | . Adani Ports and Special Economic Zone Ltd. | SERVICES | ADANIPORTS | EQ | INE742F01042 | . Adani Power Ltd. | ENERGY | ADANIPOWER | EQ | INE814H01011 | . Adani Transmission Ltd. | ENERGY | ADANITRANS | EQ | INE931S01010 | . Aditya Birla Capital Ltd. | FINANCIAL SERVICES | ABCAPITAL | EQ | INE674K01013 | . Aditya Birla Fashion and Retail Ltd. | CONSUMER GOODS | ABFRL | EQ | INE647O01011 | . Advanced Enzyme Tech Ltd. | CONSUMER GOODS | ADVENZYMES | EQ | INE837H01020 | . Aegis Logistics Ltd. | ENERGY | AEGISCHEM | EQ | INE208C01025 | . Ajanta Pharmaceuticals Ltd. | PHARMA | AJANTPHARM | EQ | INE031B01049 | . Akzo Nobel India Ltd. | CONSUMER GOODS | AKZOINDIA | EQ | INE133A01011 | . Alembic Pharmaceuticals Ltd. | PHARMA | APLLTD | EQ | INE901L01018 | . Alkem Laboratories Ltd. | PHARMA | ALKEM | EQ | INE540L01014 | . Allahabad Bank | FINANCIAL SERVICES | ALBK | EQ | INE428A01015 | . Allcargo Logistics Ltd. | SERVICES | ALLCARGO | EQ | INE418H01029 | . Amara Raja Batteries Ltd. | AUTOMOBILE | AMARAJABAT | EQ | INE885A01032 | . Ambuja Cements Ltd. | CEMENT &amp; CEMENT PRODUCTS | AMBUJACEM | EQ | INE079A01024 | . Andhra Bank | FINANCIAL SERVICES | ANDHRABANK | EQ | INE434A01013 | . Apollo Hospitals Enterprise Ltd. | HEALTHCARE SERVICES | APOLLOHOSP | EQ | INE437A01024 | . Apollo Tyres Ltd. | AUTOMOBILE | APOLLOTYRE | EQ | INE438A01022 | . Ashok Leyland Ltd. | AUTOMOBILE | ASHOKLEY | EQ | INE208A01029 | . Ashoka Buildcon Ltd. | CONSTRUCTION | ASHOKA | EQ | INE442H01029 | . Asian Paints Ltd. | CONSUMER GOODS | ASIANPAINT | EQ | INE021A01026 | . Aster DM Healthcare Ltd. | HEALTHCARE SERVICES | ASTERDM | EQ | INE914M01019 | . AstraZenca Pharma India Ltd. | PHARMA | ASTRAZEN | EQ | INE203A01020 | . Astral Poly Technik Ltd. | INDUSTRIAL MANUFACTURING | ASTRAL | EQ | INE006I01046 | . Atul Ltd. | CHEMICALS | ATUL | EQ | INE100A01010 | . Aurobindo Pharma Ltd. | PHARMA | AUROPHARMA | EQ | INE406A01037 | . Avanti Feeds Ltd. | CONSUMER GOODS | AVANTIFEED | EQ | INE871C01038 | . Avenue Supermarts Ltd. | CONSUMER GOODS | DMART | EQ | INE192R01011 | . Axis Bank Ltd. | FINANCIAL SERVICES | AXISBANK | EQ | INE238A01034 | . BASF India Ltd. | CHEMICALS | BASF | EQ | INE373A01013 | . BEML Ltd. | INDUSTRIAL MANUFACTURING | BEML | EQ | INE258A01016 | . BSE Ltd. | FINANCIAL SERVICES | BSE | EQ | INE118H01025 | . Bajaj Auto Ltd. | AUTOMOBILE | BAJAJ-AUTO | EQ | INE917I01010 | . Bajaj Consumer Care Ltd. | CONSUMER GOODS | BAJAJCON | EQ | INE933K01021 | . Bajaj Electricals Ltd | CONSUMER GOODS | BAJAJELEC | EQ | INE193E01025 | . Bajaj Finance Ltd. | FINANCIAL SERVICES | BAJFINANCE | EQ | INE296A01024 | . Bajaj Finserv Ltd. | FINANCIAL SERVICES | BAJAJFINSV | EQ | INE918I01018 | . Bajaj Holdings &amp; Investment Ltd. | FINANCIAL SERVICES | BAJAJHLDNG | EQ | INE118A01012 | . Balkrishna Industries Ltd. | AUTOMOBILE | BALKRISIND | EQ | INE787D01026 | . Balmer Lawrie &amp; Co. Ltd. | SERVICES | BALMLAWRIE | EQ | INE164A01016 | . Balrampur Chini Mills Ltd. | CONSUMER GOODS | BALRAMCHIN | EQ | INE119A01028 | . Bandhan Bank Ltd. | FINANCIAL SERVICES | BANDHANBNK | EQ | INE545U01014 | . Bank of Baroda | FINANCIAL SERVICES | BANKBARODA | EQ | INE028A01039 | . Bank of India | FINANCIAL SERVICES | BANKINDIA | EQ | INE084A01016 | . Bank of Maharashtra. | FINANCIAL SERVICES | MAHABANK | EQ | INE457A01014 | . Bata India Ltd. | CONSUMER GOODS | BATAINDIA | EQ | INE176A01028 | . Berger Paints India Ltd. | CONSUMER GOODS | BERGEPAINT | EQ | INE463A01038 | . Bharat Dynamics Ltd. | INDUSTRIAL MANUFACTURING | BDL | EQ | INE171Z01018 | . Bharat Electronics Ltd. | INDUSTRIAL MANUFACTURING | BEL | EQ | INE263A01024 | . Bharat Forge Ltd. | INDUSTRIAL MANUFACTURING | BHARATFORG | EQ | INE465A01025 | . Bharat Heavy Electricals Ltd. | INDUSTRIAL MANUFACTURING | BHEL | EQ | INE257A01026 | . Bharat Petroleum Corporation Ltd. | ENERGY | BPCL | EQ | INE029A01011 | . Bharti Airtel Ltd. | TELECOM | BHARTIARTL | EQ | INE397D01024 | . Bharti Infratel Ltd. | TELECOM | INFRATEL | EQ | INE121J01017 | . Biocon Ltd. | PHARMA | BIOCON | EQ | INE376G01013 | . Birla Corporation Ltd. | CEMENT &amp; CEMENT PRODUCTS | BIRLACORPN | EQ | INE340A01012 | . Bliss GVS Pharma Ltd. | PHARMA | BLISSGVS | EQ | INE416D01022 | . Blue Dart Express Ltd. | SERVICES | BLUEDART | EQ | INE233B01017 | . Blue Star Ltd. | CONSUMER GOODS | BLUESTARCO | EQ | INE472A01039 | . Bombay Burmah Trading Corporation Ltd. | CONSUMER GOODS | BBTC | EQ | INE050A01025 | . Bombay Dyeing &amp; Manufacturing Co. Ltd. | TEXTILES | BOMDYEING | EQ | INE032A01023 | . Bosch Ltd. | AUTOMOBILE | BOSCHLTD | EQ | INE323A01026 | . Brigade Enterprises Ltd. | CONSTRUCTION | BRIGADE | EQ | INE791I01019 | . Britannia Industries Ltd. | CONSUMER GOODS | BRITANNIA | EQ | INE216A01030 | . CARE Ratings Ltd. | FINANCIAL SERVICES | CARERATING | EQ | INE752H01013 | . CCL Products (I) Ltd. | CONSUMER GOODS | CCL | EQ | INE421D01022 | . CESC Ltd. | ENERGY | CESC | EQ | INE486A01013 | . CG Power and Industrial Solutions Ltd. | INDUSTRIAL MANUFACTURING | CGPOWER | EQ | INE067A01029 | . CRISIL Ltd. | FINANCIAL SERVICES | CRISIL | EQ | INE007A01025 | . Cadila Healthcare Ltd. | PHARMA | CADILAHC | EQ | INE010B01027 | . Can Fin Homes Ltd. | FINANCIAL SERVICES | CANFINHOME | EQ | INE477A01020 | . Canara Bank | FINANCIAL SERVICES | CANBK | EQ | INE476A01014 | . Caplin Point Laboratories Ltd. | PHARMA | CAPLIPOINT | EQ | INE475E01026 | . Carborundum Universal Ltd. | INDUSTRIAL MANUFACTURING | CARBORUNIV | EQ | INE120A01034 | . Castrol India Ltd. | ENERGY | CASTROLIND | EQ | INE172A01027 | . Ceat Ltd. | AUTOMOBILE | CEATLTD | EQ | INE482A01020 | . Central Bank of India | FINANCIAL SERVICES | CENTRALBK | EQ | INE483A01010 | . Central Depository Services (India) Ltd. | FINANCIAL SERVICES | CDSL | EQ | INE736A01011 | . Century Plyboards (India) Ltd. | CONSUMER GOODS | CENTURYPLY | EQ | INE348B01021 | . Cera Sanitaryware Ltd | CONSTRUCTION | CERA | EQ | INE739E01017 | . Chambal Fertilizers &amp; Chemicals Ltd. | FERTILISERS &amp; PESTICIDES | CHAMBLFERT | EQ | INE085A01013 | . Chennai Petroleum Corporation Ltd. | ENERGY | CHENNPETRO | EQ | INE178A01016 | . Cholamandalam Financial Holdings Ltd. | FINANCIAL SERVICES | CHOLAHLDNG | EQ | INE149A01033 | . Cholamandalam Investment and Finance Company Ltd. | FINANCIAL SERVICES | CHOLAFIN | EQ | INE121A01016 | . Cipla Ltd. | PHARMA | CIPLA | EQ | INE059A01026 | . City Union Bank Ltd. | FINANCIAL SERVICES | CUB | EQ | INE491A01021 | . Coal India Ltd. | METALS | COALINDIA | EQ | INE522F01014 | . Cochin Shipyard Ltd. | INDUSTRIAL MANUFACTURING | COCHINSHIP | EQ | INE704P01017 | . Coffee Day Enterprises Ltd. | CONSUMER GOODS | COFFEEDAY | EQ | INE335K01011 | . Colgate Palmolive (India) Ltd. | CONSUMER GOODS | COLPAL | EQ | INE259A01022 | . Container Corporation of India Ltd. | SERVICES | CONCOR | EQ | INE111A01025 | . Coromandel International Ltd. | FERTILISERS &amp; PESTICIDES | COROMANDEL | EQ | INE169A01031 | . Corporation Bank | FINANCIAL SERVICES | CORPBANK | EQ | INE112A01023 | . Cox &amp; Kings Ltd. | SERVICES | COX&amp;KINGS | EQ | INE008I01026 | . CreditAccess Grameen Ltd. | FINANCIAL SERVICES | CREDITACC | EQ | INE741K01010 | . Crompton Greaves Consumer Electricals Ltd. | CONSUMER GOODS | CROMPTON | EQ | INE299U01018 | . Cummins India Ltd. | INDUSTRIAL MANUFACTURING | CUMMINSIND | EQ | INE298A01020 | . Cyient Ltd. | IT | CYIENT | EQ | INE136B01020 | . D.B.Corp Ltd. | MEDIA &amp; ENTERTAINMENT | DBCORP | EQ | INE950I01011 | . DCB Bank Ltd. | FINANCIAL SERVICES | DCBBANK | EQ | INE503A01015 | . DCM Shriram Ltd. | CONSUMER GOODS | DCMSHRIRAM | EQ | INE499A01024 | . DLF Ltd. | CONSTRUCTION | DLF | EQ | INE271C01023 | . Dabur India Ltd. | CONSUMER GOODS | DABUR | EQ | INE016A01026 | . Deepak Fertilisers &amp; Petrochemicals Corp. Ltd. | CHEMICALS | DEEPAKFERT | EQ | INE501A01019 | . Deepak Nitrite Ltd. | CHEMICALS | DEEPAKNTR | EQ | INE288B01029 | . Delta Corp Ltd. | SERVICES | DELTACORP | EQ | INE124G01033 | . Dewan Housing Finance Corporation Ltd. | FINANCIAL SERVICES | DHFL | EQ | INE202B01012 | . Dilip Buildcon Ltd. | CONSTRUCTION | DBL | EQ | INE917M01012 | . Dish TV India Ltd. | MEDIA &amp; ENTERTAINMENT | DISHTV | EQ | INE836F01026 | . Dishman Carbogen Amcis Ltd. | PHARMA | DCAL | EQ | INE385W01011 | . Divi’s Laboratories Ltd. | PHARMA | DIVISLAB | EQ | INE361B01024 | . Dixon Technologies (India) Ltd. | CONSUMER GOODS | DIXON | EQ | INE935N01012 | . Dr. Lal Path Labs Ltd. | HEALTHCARE SERVICES | LALPATHLAB | EQ | INE600L01024 | . Dr. Reddy’s Laboratories Ltd. | PHARMA | DRREDDY | EQ | INE089A01023 | . E.I.D. Parry (India) Ltd. | FERTILISERS &amp; PESTICIDES | EIDPARRY | EQ | INE126A01031 | . EIH Ltd. | SERVICES | EIHOTEL | EQ | INE230A01023 | . Edelweiss Financial Services Ltd. | FINANCIAL SERVICES | EDELWEISS | EQ | INE532F01054 | . Eicher Motors Ltd. | AUTOMOBILE | EICHERMOT | EQ | INE066A01013 | . Elgi Equipments Ltd. | INDUSTRIAL MANUFACTURING | ELGIEQUIP | EQ | INE285A01027 | . Emami Ltd. | CONSUMER GOODS | EMAMILTD | EQ | INE548C01032 | . Endurance Technologies Ltd. | AUTOMOBILE | ENDURANCE | EQ | INE913H01037 | . Engineers India Ltd. | CONSTRUCTION | ENGINERSIN | EQ | INE510A01028 | . Equitas Holdings Ltd. | FINANCIAL SERVICES | EQUITAS | EQ | INE988K01017 | . Eris Lifesciences Ltd. | PHARMA | ERIS | EQ | INE406M01024 | . Escorts Ltd. | AUTOMOBILE | ESCORTS | EQ | INE042A01014 | . Essel Propack Ltd. | INDUSTRIAL MANUFACTURING | ESSELPACK | EQ | INE255A01020 | . Exide Industries Ltd. | AUTOMOBILE | EXIDEIND | EQ | INE302A01020 | . FDC Ltd. | PHARMA | FDC | EQ | INE258B01022 | . Federal Bank Ltd. | FINANCIAL SERVICES | FEDERALBNK | EQ | INE171A01029 | . Fine Organic Industries Ltd. | CHEMICALS | FINEORG | EQ | INE686Y01026 | . Finolex Cables Ltd. | INDUSTRIAL MANUFACTURING | FINCABLES | EQ | INE235A01022 | . Finolex Industries Ltd. | INDUSTRIAL MANUFACTURING | FINPIPE | EQ | INE183A01016 | . Firstsource Solutions Ltd. | IT | FSL | EQ | INE684F01012 | . Fortis Healthcare Ltd. | HEALTHCARE SERVICES | FORTIS | EQ | INE061F01013 | . Future Consumer Ltd. | CONSUMER GOODS | FCONSUMER | EQ | INE220J01025 | . Future Lifestyle Fashions Ltd. | CONSUMER GOODS | FLFL | EQ | INE452O01016 | . Future Retail Ltd. | CONSUMER GOODS | FRETAIL | EQ | INE752P01024 | . GAIL (India) Ltd. | ENERGY | GAIL | EQ | INE129A01019 | . GE Power India Ltd. | INDUSTRIAL MANUFACTURING | GEPIL | EQ | INE878A01011 | . GE T&amp;D India Ltd. | INDUSTRIAL MANUFACTURING | GET&amp;D | EQ | INE200A01026 | . GHCL Ltd. | CHEMICALS | GHCL | EQ | INE539A01019 | . GMR Infrastructure Ltd. | CONSTRUCTION | GMRINFRA | EQ | INE776C01039 | . Galaxy Surfactants Ltd. | CHEMICALS | GALAXYSURF | EQ | INE600K01018 | . Gateway Distriparks Ltd. | SERVICES | GDL | EQ | INE852F01015 | . Gayatri Projects Ltd. | CONSTRUCTION | GAYAPROJ | EQ | INE336H01023 | . General Insurance Corporation of India | FINANCIAL SERVICES | GICRE | EQ | INE481Y01014 | . Gillette India Ltd. | CONSUMER GOODS | GILLETTE | EQ | INE322A01010 | . GlaxoSmithkline Consumer Healthcare Ltd. | CONSUMER GOODS | GSKCONS | EQ | INE264A01014 | . Glaxosmithkline Pharmaceuticals Ltd. | PHARMA | GLAXO | EQ | INE159A01016 | . Glenmark Pharmaceuticals Ltd. | PHARMA | GLENMARK | EQ | INE935A01035 | . Godfrey Phillips India Ltd. | CONSUMER GOODS | GODFRYPHLP | EQ | INE260B01028 | . Godrej Agrovet Ltd. | CONSUMER GOODS | GODREJAGRO | EQ | INE850D01014 | . Godrej Consumer Products Ltd. | CONSUMER GOODS | GODREJCP | EQ | INE102D01028 | . Godrej Industries Ltd. | CONSUMER GOODS | GODREJIND | EQ | INE233A01035 | . Godrej Properties Ltd. | CONSTRUCTION | GODREJPROP | EQ | INE484J01027 | . Granules India Ltd. | PHARMA | GRANULES | EQ | INE101D01020 | . Graphite India Ltd. | INDUSTRIAL MANUFACTURING | GRAPHITE | EQ | INE371A01025 | . Grasim Industries Ltd. | CEMENT &amp; CEMENT PRODUCTS | GRASIM | EQ | INE047A01021 | . Great Eastern Shipping Co. Ltd. | SERVICES | GESHIP | EQ | INE017A01032 | . Greaves Cotton Ltd. | INDUSTRIAL MANUFACTURING | GREAVESCOT | EQ | INE224A01026 | . Grindwell Norton Ltd. | INDUSTRIAL MANUFACTURING | GRINDWELL | EQ | INE536A01023 | . Gruh Finance Ltd. | FINANCIAL SERVICES | GRUH | EQ | INE580B01029 | . Gujarat Alkalies &amp; Chemicals Ltd. | CHEMICALS | GUJALKALI | EQ | INE186A01019 | . Gujarat Fluorochemicals Ltd. | CHEMICALS | GUJFLUORO | EQ | INE538A01037 | . Gujarat Gas Ltd. | ENERGY | GUJGASLTD | EQ | INE844O01030 | . Gujarat Mineral Development Corporation Ltd. | METALS | GMDCLTD | EQ | INE131A01031 | . Gujarat Narmada Valley Fertilizers and Chemicals Ltd. | CHEMICALS | GNFC | EQ | INE113A01013 | . Gujarat Pipavav Port Ltd. | SERVICES | GPPL | EQ | INE517F01014 | . Gujarat State Fertilizers &amp; Chemicals Ltd. | FERTILISERS &amp; PESTICIDES | GSFC | EQ | INE026A01025 | . Gujarat State Petronet Ltd. | ENERGY | GSPL | EQ | INE246F01010 | . Gulf Oil Lubricants India Ltd. | ENERGY | GULFOILLUB | EQ | INE635Q01029 | . H.E.G. Ltd. | INDUSTRIAL MANUFACTURING | HEG | EQ | INE545A01016 | . HCL Technologies Ltd. | IT | HCLTECH | EQ | INE860A01027 | . HDFC Asset Management Company Ltd. | FINANCIAL SERVICES | HDFCAMC | EQ | INE127D01025 | . HDFC Bank Ltd. | FINANCIAL SERVICES | HDFCBANK | EQ | INE040A01026 | . HDFC Life Insurance Company Ltd. | FINANCIAL SERVICES | HDFCLIFE | EQ | INE795G01014 | . Hathway Cable &amp; Datacom Ltd. | MEDIA &amp; ENTERTAINMENT | HATHWAY | EQ | INE982F01036 | . Hatsun Agro Product Ltd. | CONSUMER GOODS | HATSUN | EQ | INE473B01035 | . Havells India Ltd. | CONSUMER GOODS | HAVELLS | EQ | INE176B01034 | . HeidelbergCement India Ltd. | CEMENT &amp; CEMENT PRODUCTS | HEIDELBERG | EQ | INE578A01017 | . Heritage Foods Ltd. | CONSUMER GOODS | HERITGFOOD | EQ | INE978A01027 | . Hero MotoCorp Ltd. | AUTOMOBILE | HEROMOTOCO | EQ | INE158A01026 | . Hexaware Technologies Ltd. | IT | HEXAWARE | EQ | INE093A01033 | . Himachal Fut Com Ltd. | TELECOM | HFCL | EQ | INE548A01028 | . Himadri Speciality Chemical Ltd. | CHEMICALS | HSCL | EQ | INE019C01026 | . Himatsingka Seide Ltd. | TEXTILES | HIMATSEIDE | EQ | INE049A01027 | . Hindalco Industries Ltd. | METALS | HINDALCO | EQ | INE038A01020 | . Hindustan Aeronautics Ltd. | INDUSTRIAL MANUFACTURING | HAL | EQ | INE066F01012 | . Hindustan Copper Ltd. | METALS | HINDCOPPER | EQ | INE531E01026 | . Hindustan Petroleum Corporation Ltd. | ENERGY | HINDPETRO | EQ | INE094A01015 | . Hindustan Unilever Ltd. | CONSUMER GOODS | HINDUNILVR | EQ | INE030A01027 | . Hindustan Zinc Ltd. | METALS | HINDZINC | EQ | INE267A01025 | . Honeywell Automation India Ltd. | INDUSTRIAL MANUFACTURING | HONAUT | EQ | INE671A01010 | . Housing &amp; Urban Development Corporation Ltd. | FINANCIAL SERVICES | HUDCO | EQ | INE031A01017 | . Housing Development Finance Corporation Ltd. | FINANCIAL SERVICES | HDFC | EQ | INE001A01036 | . ICICI Bank Ltd. | FINANCIAL SERVICES | ICICIBANK | EQ | INE090A01021 | . ICICI Lombard General Insurance Company Ltd. | FINANCIAL SERVICES | ICICIGI | EQ | INE765G01017 | . ICICI Prudential Life Insurance Company Ltd. | FINANCIAL SERVICES | ICICIPRULI | EQ | INE726G01019 | . ICICI Securities Ltd. | FINANCIAL SERVICES | ISEC | EQ | INE763G01038 | . ICRA Ltd. | FINANCIAL SERVICES | ICRA | EQ | INE725G01011 | . IDBI Bank Ltd. | FINANCIAL SERVICES | IDBI | EQ | INE008A01015 | . IDFC First Bank Ltd. | FINANCIAL SERVICES | IDFCFIRSTB | EQ | INE092T01019 | . IDFC Ltd. | FINANCIAL SERVICES | IDFC | EQ | INE043D01016 | . IFB Industries Ltd. | CONSUMER GOODS | IFBIND | EQ | INE559A01017 | . IFCI Ltd. | FINANCIAL SERVICES | IFCI | EQ | INE039A01010 | . IRB Infrastructure Developers Ltd. | CONSTRUCTION | IRB | EQ | INE821I01014 | . IRCON International Ltd. | CONSTRUCTION | IRCON | EQ | INE962Y01013 | . ITC Ltd. | CONSUMER GOODS | ITC | EQ | INE154A01025 | . ITD Cementation India Ltd. | CONSTRUCTION | ITDCEM | EQ | INE686A01026 | . ITI Ltd. | TELECOM | ITI | EQ | INE248A01017 | . India Cements Ltd. | CEMENT &amp; CEMENT PRODUCTS | INDIACEM | EQ | INE383A01012 | . India Tourism Development Corporation Ltd. | SERVICES | ITDC | EQ | INE353K01014 | . Indiabulls Housing Finance Ltd. | FINANCIAL SERVICES | IBULHSGFIN | EQ | INE148I01020 | . Indiabulls Integrated Services Ltd. | IT | IBULISL | EQ | INE126M01010 | . Indiabulls Real Estate Ltd. | CONSTRUCTION | IBREALEST | EQ | INE069I01010 | . Indiabulls Ventures Ltd. | FINANCIAL SERVICES | IBVENTURES | EQ | INE274G01010 | . Indian Bank | FINANCIAL SERVICES | INDIANB | EQ | INE562A01011 | . Indian Energy Exchange Ltd. | FINANCIAL SERVICES | IEX | EQ | INE022Q01020 | . Indian Hotels Co. Ltd. | SERVICES | INDHOTEL | EQ | INE053A01029 | . Indian Oil Corporation Ltd. | ENERGY | IOC | EQ | INE242A01010 | . Indian Overseas Bank | FINANCIAL SERVICES | IOB | EQ | INE565A01014 | . IndoStar Capital Finance Ltd. | FINANCIAL SERVICES | INDOSTAR | EQ | INE896L01010 | . Indoco Remedies Ltd. | PHARMA | INDOCO | EQ | INE873D01024 | . Indraprastha Gas Ltd. | ENERGY | IGL | EQ | INE203G01027 | . IndusInd Bank Ltd. | FINANCIAL SERVICES | INDUSINDBK | EQ | INE095A01012 | . Infibeam Avenues Ltd. | IT | INFIBEAM | EQ | INE483S01020 | . Info Edge (India) Ltd. | IT | NAUKRI | EQ | INE663F01024 | . Infosys Ltd. | IT | INFY | EQ | INE009A01021 | . Inox Leisure Ltd. | MEDIA &amp; ENTERTAINMENT | INOXLEISUR | EQ | INE312H01016 | . Inox Wind Ltd. | INDUSTRIAL MANUFACTURING | INOXWIND | EQ | INE066P01011 | . Intellect Design Arena Ltd. | IT | INTELLECT | EQ | INE306R01017 | . InterGlobe Aviation Ltd. | SERVICES | INDIGO | EQ | INE646L01027 | . Ipca Laboratories Ltd. | PHARMA | IPCALAB | EQ | INE571A01020 | . J.B. Chemicals &amp; Pharmaceuticals Ltd. | PHARMA | JBCHEPHARM | EQ | INE572A01028 | . J.K. Cement Ltd. | CEMENT &amp; CEMENT PRODUCTS | JKCEMENT | EQ | INE823G01014 | . JK Lakshmi Cement Ltd. | CEMENT &amp; CEMENT PRODUCTS | JKLAKSHMI | EQ | INE786A01032 | . JK Paper Ltd. | PAPER | JKPAPER | EQ | INE789E01012 | . JK Tyre &amp; Industries Ltd. | AUTOMOBILE | JKTYRE | EQ | INE573A01042 | . JM Financial Ltd. | FINANCIAL SERVICES | JMFINANCIL | EQ | INE780C01023 | . JSW Energy Ltd. | ENERGY | JSWENERGY | EQ | INE121E01018 | . JSW Steel Ltd. | METALS | JSWSTEEL | EQ | INE019A01038 | . Jagran Prakashan Ltd. | MEDIA &amp; ENTERTAINMENT | JAGRAN | EQ | INE199G01027 | . Jai Corp Ltd. | INDUSTRIAL MANUFACTURING | JAICORPLTD | EQ | INE070D01027 | . Jain Irrigation Systems Ltd. | INDUSTRIAL MANUFACTURING | JISLJALEQS | EQ | INE175A01038 | . Jaiprakash Associates Ltd. | CEMENT &amp; CEMENT PRODUCTS | JPASSOCIAT | EQ | INE455F01025 | . Jammu &amp; Kashmir Bank Ltd. | FINANCIAL SERVICES | J&amp;KBANK | EQ | INE168A01041 | . Jamna Auto Industries Ltd. | AUTOMOBILE | JAMNAAUTO | EQ | INE039C01032 | . Jet Airways (India) Ltd. | SERVICES | JETAIRWAYS | EQ | INE802G01018 | . Jindal Saw Ltd. | METALS | JINDALSAW | EQ | INE324A01024 | . Jindal Stainless (Hisar) Ltd. | METALS | JSLHISAR | EQ | INE455T01018 | . Jindal Stainless Ltd. | METALS | JSL | EQ | INE220G01021 | . Jindal Steel &amp; Power Ltd. | METALS | JINDALSTEL | EQ | INE749A01030 | . Jubilant Foodworks Ltd. | CONSUMER GOODS | JUBLFOOD | EQ | INE797F01012 | . Jubilant Life Sciences Ltd. | PHARMA | JUBILANT | EQ | INE700A01033 | . Justdial Ltd. | IT | JUSTDIAL | EQ | INE599M01018 | . Jyothy Laboratories Ltd. | CONSUMER GOODS | JYOTHYLAB | EQ | INE668F01031 | . K.P.R. Mill Ltd. | TEXTILES | KPRMILL | EQ | INE930H01023 | . KEI Industries Ltd. | INDUSTRIAL MANUFACTURING | KEI | EQ | INE878B01027 | . KIOCL Ltd. | METALS | KIOCL | EQ | INE880L01014 | . KNR Constructions Ltd. | CONSTRUCTION | KNRCON | EQ | INE634I01029 | . KRBL Ltd. | CONSUMER GOODS | KRBL | EQ | INE001B01026 | . Kajaria Ceramics Ltd. | CONSTRUCTION | KAJARIACER | EQ | INE217B01036 | . Kalpataru Power Transmission Ltd. | ENERGY | KALPATPOWR | EQ | INE220B01022 | . Kansai Nerolac Paints Ltd. | CONSUMER GOODS | KANSAINER | EQ | INE531A01024 | . Karnataka Bank Ltd. | FINANCIAL SERVICES | KTKBANK | EQ | INE614B01018 | . Karur Vysya Bank Ltd. | FINANCIAL SERVICES | KARURVYSYA | EQ | INE036D01028 | . Kaveri Seed Company Ltd. | CONSUMER GOODS | KSCL | EQ | INE455I01029 | . Kec International Ltd. | CONSTRUCTION | KEC | EQ | INE389H01022 | . Kirloskar Oil Eng Ltd. | INDUSTRIAL MANUFACTURING | KIRLOSENG | EQ | INE146L01010 | . Kolte-Patil Developers Ltd. | CONSTRUCTION | KOLTEPATIL | EQ | INE094I01018 | . Kotak Mahindra Bank Ltd. | FINANCIAL SERVICES | KOTAKBANK | EQ | INE237A01028 | . L&amp;T Finance Holdings Ltd. | FINANCIAL SERVICES | L&amp;TFH | EQ | INE498L01015 | . L&amp;T Technology Services Ltd. | IT | LTTS | EQ | INE010V01017 | . LIC Housing Finance Ltd. | FINANCIAL SERVICES | LICHSGFIN | EQ | INE115A01026 | . Lakshmi Machine Works Ltd. | INDUSTRIAL MANUFACTURING | LAXMIMACH | EQ | INE269B01029 | . Lakshmi Vilas Bank Ltd. | FINANCIAL SERVICES | LAKSHVILAS | EQ | INE694C01018 | . Larsen &amp; Toubro Infotech Ltd. | IT | LTI | EQ | INE214T01019 | . Larsen &amp; Toubro Ltd. | CONSTRUCTION | LT | EQ | INE018A01030 | . Laurus Labs Ltd. | PHARMA | LAURUSLABS | EQ | INE947Q01010 | . Lemon Tree Hotels Ltd. | SERVICES | LEMONTREE | EQ | INE970X01018 | . Linde India Ltd. | CHEMICALS | LINDEINDIA | EQ | INE473A01011 | . Lupin Ltd. | PHARMA | LUPIN | EQ | INE326A01037 | . Lux Industries Ltd. | TEXTILES | LUXIND | EQ | INE150G01020 | . MAS Financial Services Ltd. | FINANCIAL SERVICES | MASFIN | EQ | INE348L01012 | . MMTC Ltd. | SERVICES | MMTC | EQ | INE123F01029 | . MOIL Ltd. | METALS | MOIL | EQ | INE490G01020 | . MRF Ltd. | AUTOMOBILE | MRF | EQ | INE883A01011 | . Magma Fincorp Ltd. | FINANCIAL SERVICES | MAGMA | EQ | INE511C01022 | . Mahanagar Gas Ltd. | ENERGY | MGL | EQ | INE002S01010 | . Maharashtra Scooters Ltd. | AUTOMOBILE | MAHSCOOTER | EQ | INE288A01013 | . Maharashtra Seamless Ltd. | METALS | MAHSEAMLES | EQ | INE271B01025 | . Mahindra &amp; Mahindra Financial Services Ltd. | FINANCIAL SERVICES | M&amp;MFIN | EQ | INE774D01024 | . Mahindra &amp; Mahindra Ltd. | AUTOMOBILE | M&amp;M | EQ | INE101A01026 | . Mahindra CIE Automotive Ltd. | INDUSTRIAL MANUFACTURING | MAHINDCIE | EQ | INE536H01010 | . Mahindra Holidays &amp; Resorts India Ltd. | SERVICES | MHRIL | EQ | INE998I01010 | . Mahindra Logistics Ltd. | SERVICES | MAHLOG | EQ | INE766P01016 | . Manappuram Finance Ltd. | FINANCIAL SERVICES | MANAPPURAM | EQ | INE522D01027 | . Mangalore Refinery &amp; Petrochemicals Ltd. | ENERGY | MRPL | EQ | INE103A01014 | . Marico Ltd. | CONSUMER GOODS | MARICO | EQ | INE196A01026 | . Maruti Suzuki India Ltd. | AUTOMOBILE | MARUTI | EQ | INE585B01010 | . Max Financial Services Ltd. | FINANCIAL SERVICES | MFSL | EQ | INE180A01020 | . Max India Ltd. | HEALTHCARE SERVICES | MAXINDIA | EQ | INE153U01017 | . MindTree Ltd. | IT | MINDTREE | EQ | INE018I01017 | . Minda Corporation Ltd. | AUTOMOBILE | MINDACORP | EQ | INE842C01021 | . Minda Industries Ltd. | AUTOMOBILE | MINDAIND | EQ | INE405E01023 | . Monsanto India Ltd. | FERTILISERS &amp; PESTICIDES | MONSANTO | EQ | INE274B01011 | . Motherson Sumi Systems Ltd. | AUTOMOBILE | MOTHERSUMI | EQ | INE775A01035 | . Motilal Oswal Financial Services Ltd. | FINANCIAL SERVICES | MOTILALOFS | EQ | INE338I01027 | . MphasiS Ltd. | IT | MPHASIS | EQ | INE356A01018 | . Muthoot Finance Ltd. | FINANCIAL SERVICES | MUTHOOTFIN | EQ | INE414G01012 | . NATCO Pharma Ltd. | PHARMA | NATCOPHARM | EQ | INE987B01026 | . NBCC (India) Ltd. | CONSTRUCTION | NBCC | EQ | INE095N01031 | . NCC Ltd. | CONSTRUCTION | NCC | EQ | INE868B01028 | . NESCO Ltd. | SERVICES | NESCO | EQ | INE317F01035 | . NHPC Ltd. | ENERGY | NHPC | EQ | INE848E01016 | . NIIT Technologies Ltd. | IT | NIITTECH | EQ | INE591G01017 | . NLC India Ltd. | ENERGY | NLCINDIA | EQ | INE589A01014 | . NMDC Ltd. | METALS | NMDC | EQ | INE584A01023 | . NTPC Ltd. | ENERGY | NTPC | EQ | INE733E01010 | . Narayana Hrudayalaya Ltd. | HEALTHCARE SERVICES | NH | EQ | INE410P01011 | . National Aluminium Co. Ltd. | METALS | NATIONALUM | EQ | INE139A01034 | . National Fertilizers Ltd. | FERTILISERS &amp; PESTICIDES | NFL | EQ | INE870D01012 | . Nava Bharat Ventures Ltd. | ENERGY | NBVENTURES | EQ | INE725A01022 | . Navin Fluorine International Ltd. | CHEMICALS | NAVINFLUOR | EQ | INE048G01026 | . Network18 Media &amp; Investments Ltd. | MEDIA &amp; ENTERTAINMENT | NETWORK18 | EQ | INE870H01013 | . Nilkamal Ltd. | INDUSTRIAL MANUFACTURING | NILKAMAL | EQ | INE310A01015 | . Oberoi Realty Ltd. | CONSTRUCTION | OBEROIRLTY | EQ | INE093I01010 | . Oil &amp; Natural Gas Corporation Ltd. | ENERGY | ONGC | EQ | INE213A01029 | . Oil India Ltd. | ENERGY | OIL | EQ | INE274J01014 | . Omaxe Ltd. | CONSTRUCTION | OMAXE | EQ | INE800H01010 | . Oracle Financial Services Software Ltd. | IT | OFSS | EQ | INE881D01027 | . Orient Cement Ltd. | CEMENT &amp; CEMENT PRODUCTS | ORIENTCEM | EQ | INE876N01018 | . Orient Electric Ltd. | CONSUMER GOODS | ORIENTELEC | EQ | INE142Z01019 | . Oriental Bank of Commerce | FINANCIAL SERVICES | ORIENTBANK | EQ | INE141A01014 | . PC Jeweller Ltd. | CONSUMER GOODS | PCJEWELLER | EQ | INE785M01013 | . PI Industries Ltd. | FERTILISERS &amp; PESTICIDES | PIIND | EQ | INE603J01030 | . PNB Housing Finance Ltd. | FINANCIAL SERVICES | PNBHOUSING | EQ | INE572E01012 | . PNC Infratech Ltd. | CONSTRUCTION | PNCINFRA | EQ | INE195J01029 | . PTC India Ltd. | ENERGY | PTC | EQ | INE877F01012 | . PVR Ltd. | MEDIA &amp; ENTERTAINMENT | PVR | EQ | INE191H01014 | . Page Industries Ltd. | TEXTILES | PAGEIND | EQ | INE761H01022 | . Parag Milk Foods Ltd. | CONSUMER GOODS | PARAGMILK | EQ | INE883N01014 | . Persistent Systems Ltd. | IT | PERSISTENT | EQ | INE262H01013 | . Petronet LNG Ltd. | ENERGY | PETRONET | EQ | INE347G01014 | . Pfizer Ltd. | PHARMA | PFIZER | EQ | INE182A01018 | . Phillips Carbon Black Ltd. | CHEMICALS | PHILIPCARB | EQ | INE602A01023 | . Phoenix Mills Ltd. | CONSTRUCTION | PHOENIXLTD | EQ | INE211B01039 | . Pidilite Industries Ltd. | CHEMICALS | PIDILITIND | EQ | INE318A01026 | . Piramal Enterprises Ltd. | PHARMA | PEL | EQ | INE140A01024 | . Power Finance Corporation Ltd. | FINANCIAL SERVICES | PFC | EQ | INE134E01011 | . Power Grid Corporation of India Ltd. | ENERGY | POWERGRID | EQ | INE752E01010 | . Praj Industries Ltd. | INDUSTRIAL MANUFACTURING | PRAJIND | EQ | INE074A01025 | . Prestige Estates Projects Ltd. | CONSTRUCTION | PRESTIGE | EQ | INE811K01011 | . Prism Johnson Ltd. | CEMENT &amp; CEMENT PRODUCTS | PRSMJOHNSN | EQ | INE010A01011 | . Procter &amp; Gamble Health Ltd. | PHARMA | PGHL | EQ | INE199A01012 | . Procter &amp; Gamble Hygiene &amp; Health Care Ltd. | CONSUMER GOODS | PGHH | EQ | INE179A01014 | . Punjab National Bank | FINANCIAL SERVICES | PNB | EQ | INE160A01022 | . Quess Corp Ltd. | SERVICES | QUESS | EQ | INE615P01015 | . RBL Bank Ltd. | FINANCIAL SERVICES | RBLBANK | EQ | INE976G01028 | . REC Ltd. | FINANCIAL SERVICES | RECLTD | EQ | INE020B01018 | . RITES Ltd. | CONSTRUCTION | RITES | EQ | INE320J01015 | . Radico Khaitan Ltd | CONSUMER GOODS | RADICO | EQ | INE944F01028 | . Rain Industries Ltd | CHEMICALS | RAIN | EQ | INE855B01025 | . Rajesh Exports Ltd. | CONSUMER GOODS | RAJESHEXPO | EQ | INE343B01030 | . Rallis India Ltd. | FERTILISERS &amp; PESTICIDES | RALLIS | EQ | INE613A01020 | . Ramkrishna Forgings Ltd. | INDUSTRIAL MANUFACTURING | RKFORGE | EQ | INE399G01015 | . Rashtriya Chemicals &amp; Fertilizers Ltd. | FERTILISERS &amp; PESTICIDES | RCF | EQ | INE027A01015 | . Raymond Ltd. | TEXTILES | RAYMOND | EQ | INE301A01014 | . Redington (India) Ltd. | SERVICES | REDINGTON | EQ | INE891D01026 | . Relaxo Footwears Ltd. | CONSUMER GOODS | RELAXO | EQ | INE131B01039 | . Reliance Capital Ltd. | FINANCIAL SERVICES | RELCAPITAL | EQ | INE013A01015 | . Reliance Communications Ltd. | TELECOM | RCOM | EQ | INE330H01018 | . Reliance Home Finance Ltd. | FINANCIAL SERVICES | RHFL | EQ | INE217K01011 | . Reliance Industries Ltd. | ENERGY | RELIANCE | EQ | INE002A01018 | . Reliance Infrastructure Ltd. | ENERGY | RELINFRA | EQ | INE036A01016 | . Reliance Nippon Life Asset Management Ltd. | FINANCIAL SERVICES | RNAM | EQ | INE298J01013 | . Reliance Power Ltd. | ENERGY | RPOWER | EQ | INE614G01033 | . Repco Home Finance Ltd. | FINANCIAL SERVICES | REPCOHOME | EQ | INE612J01015 | . Rupa &amp; Company Ltd. | TEXTILES | RUPA | EQ | INE895B01021 | . S H Kelkar and Company Ltd. | CONSUMER GOODS | SHK | EQ | INE500L01026 | . SBI Life Insurance Company Ltd. | FINANCIAL SERVICES | SBILIFE | EQ | INE123W01016 | . SJVN Ltd. | ENERGY | SJVN | EQ | INE002L01015 | . SKF India Ltd. | INDUSTRIAL MANUFACTURING | SKFINDIA | EQ | INE640A01023 | . SREI Infrastructure Finance Ltd. | FINANCIAL SERVICES | SREINFRA | EQ | INE872A01014 | . SRF Ltd. | TEXTILES | SRF | EQ | INE647A01010 | . Sadbhav Engineering Ltd. | CONSTRUCTION | SADBHAV | EQ | INE226H01026 | . Sanofi India Ltd. | PHARMA | SANOFI | EQ | INE058A01010 | . Schaeffler India Ltd. | INDUSTRIAL MANUFACTURING | SCHAEFFLER | EQ | INE513A01014 | . Security and Intelligence Services (India) Ltd. | SERVICES | SIS | EQ | INE285J01010 | . Shankara Building Products Ltd. | METALS | SHANKARA | EQ | INE274V01019 | . Sharda Cropchem Ltd. | FERTILISERS &amp; PESTICIDES | SHARDACROP | EQ | INE221J01015 | . Sheela Foam Ltd. | CONSUMER GOODS | SFL | EQ | INE916U01025 | . Shilpa Medicare Ltd. | PHARMA | SHILPAMED | EQ | INE790G01031 | . Shipping Corporation of India Ltd. | SERVICES | SCI | EQ | INE109A01011 | . Shoppers Stop Ltd. | CONSUMER GOODS | SHOPERSTOP | EQ | INE498B01024 | . Shree Cement Ltd. | CEMENT &amp; CEMENT PRODUCTS | SHREECEM | EQ | INE070A01015 | . Shree Renuka Sugars Ltd. | CONSUMER GOODS | RENUKA | EQ | INE087H01022 | . Shriram City Union Finance Ltd. | FINANCIAL SERVICES | SHRIRAMCIT | EQ | INE722A01011 | . Shriram Transport Finance Co. Ltd. | FINANCIAL SERVICES | SRTRANSFIN | EQ | INE721A01013 | . Siemens Ltd. | INDUSTRIAL MANUFACTURING | SIEMENS | EQ | INE003A01024 | . Sintex Plastics Technology Ltd. | INDUSTRIAL MANUFACTURING | SPTL | EQ | INE501W01021 | . Sobha Ltd. | CONSTRUCTION | SOBHA | EQ | INE671H01015 | . Solar Industries India Ltd. | CHEMICALS | SOLARINDS | EQ | INE343H01029 | . Sonata Software Ltd. | IT | SONATSOFTW | EQ | INE269A01021 | . South Indian Bank Ltd. | FINANCIAL SERVICES | SOUTHBANK | EQ | INE683A01023 | . Star Cement Ltd. | CEMENT &amp; CEMENT PRODUCTS | STARCEMENT | EQ | INE460H01021 | . State Bank of India | FINANCIAL SERVICES | SBIN | EQ | INE062A01020 | . Steel Authority of India Ltd. | METALS | SAIL | EQ | INE114A01011 | . Sterlite Technologies Ltd. | TELECOM | STRTECH | EQ | INE089C01029 | . Strides Pharma Science Ltd. | PHARMA | STAR | EQ | INE939A01011 | . Sudarshan Chemical Industries Ltd. | CHEMICALS | SUDARSCHEM | EQ | INE659A01023 | . Sun Pharma Advanced Research Company Ltd. | PHARMA | SPARC | EQ | INE232I01014 | . Sun Pharmaceutical Industries Ltd. | PHARMA | SUNPHARMA | EQ | INE044A01036 | . Sun TV Network Ltd. | MEDIA &amp; ENTERTAINMENT | SUNTV | EQ | INE424H01027 | . Sundaram Clayton Ltd. | AUTOMOBILE | SUNCLAYLTD | EQ | INE105A01035 | . Sundaram Finance Ltd. | FINANCIAL SERVICES | SUNDARMFIN | EQ | INE660A01013 | . Sundram Fasteners Ltd. | AUTOMOBILE | SUNDRMFAST | EQ | INE387A01021 | . Sunteck Realty Ltd. | CONSTRUCTION | SUNTECK | EQ | INE805D01034 | . Suprajit Engineering Ltd. | AUTOMOBILE | SUPRAJIT | EQ | INE399C01030 | . Supreme Industries Ltd. | INDUSTRIAL MANUFACTURING | SUPREMEIND | EQ | INE195A01028 | . Suven Life Sciences Ltd. | PHARMA | SUVEN | EQ | INE495B01038 | . Suzlon Energy Ltd. | INDUSTRIAL MANUFACTURING | SUZLON | EQ | INE040H01021 | . Swan Energy Ltd. | TEXTILES | SWANENERGY | EQ | INE665A01038 | . Symphony Ltd. | CONSUMER GOODS | SYMPHONY | EQ | INE225D01027 | . Syndicate Bank | FINANCIAL SERVICES | SYNDIBANK | EQ | INE667A01018 | . Syngene International Ltd. | PHARMA | SYNGENE | EQ | INE398R01022 | . TCNS Clothing Co. Ltd. | TEXTILES | TCNSBRANDS | EQ | INE778U01029 | . TTK Prestige Ltd. | CONSUMER GOODS | TTKPRESTIG | EQ | INE690A01010 | . TV Today Network Ltd. | MEDIA &amp; ENTERTAINMENT | TVTODAY | EQ | INE038F01029 | . TV18 Broadcast Ltd. | MEDIA &amp; ENTERTAINMENT | TV18BRDCST | EQ | INE886H01027 | . TVS Motor Company Ltd. | AUTOMOBILE | TVSMOTOR | EQ | INE494B01023 | . Take Solutions Ltd. | IT | TAKE | EQ | INE142I01023 | . Tamil Nadu Newsprint &amp; Papers Ltd. | PAPER | TNPL | EQ | INE107A01015 | . Tata Chemicals Ltd. | CHEMICALS | TATACHEM | EQ | INE092A01019 | . Tata Coffee Ltd. | CONSUMER GOODS | TATACOFFEE | EQ | INE493A01027 | . Tata Consultancy Services Ltd. | IT | TCS | EQ | INE467B01029 | . Tata Elxsi Ltd. | IT | TATAELXSI | EQ | INE670A01012 | . Tata Global Beverages Ltd. | CONSUMER GOODS | TATAGLOBAL | EQ | INE192A01025 | . Tata Investment Corporation Ltd. | FINANCIAL SERVICES | TATAINVEST | EQ | INE672A01018 | . Tata Motors Ltd DVR | AUTOMOBILE | TATAMTRDVR | EQ | IN9155A01020 | . Tata Motors Ltd. | AUTOMOBILE | TATAMOTORS | EQ | INE155A01022 | . Tata Power Co. Ltd. | ENERGY | TATAPOWER | EQ | INE245A01021 | . Tata Steel Ltd. | METALS | TATASTEEL | EQ | INE081A01012 | . Teamlease Services Ltd. | SERVICES | TEAMLEASE | EQ | INE985S01024 | . Tech Mahindra Ltd. | IT | TECHM | EQ | INE669C01036 | . The New India Assurance Company Ltd. | FINANCIAL SERVICES | NIACL | EQ | INE470Y01017 | . The Ramco Cements Ltd. | CEMENT &amp; CEMENT PRODUCTS | RAMCOCEM | EQ | INE331A01037 | . Thermax Ltd. | INDUSTRIAL MANUFACTURING | THERMAX | EQ | INE152A01029 | . Thomas Cook (India) Ltd. | SERVICES | THOMASCOOK | EQ | INE332A01027 | . Thyrocare Technologies Ltd. | HEALTHCARE SERVICES | THYROCARE | EQ | INE594H01019 | . Time Technoplast Ltd. | INDUSTRIAL MANUFACTURING | TIMETECHNO | EQ | INE508G01029 | . Timken India Ltd. | INDUSTRIAL MANUFACTURING | TIMKEN | EQ | INE325A01013 | . Titan Company Ltd. | CONSUMER GOODS | TITAN | EQ | INE280A01028 | . Torrent Pharmaceuticals Ltd. | PHARMA | TORNTPHARM | EQ | INE685A01028 | . Torrent Power Ltd. | ENERGY | TORNTPOWER | EQ | INE813H01021 | . Trent Ltd. | CONSUMER GOODS | TRENT | EQ | INE849A01020 | . Trident Ltd. | TEXTILES | TRIDENT | EQ | INE064C01014 | . Triveni Turbine Ltd. | INDUSTRIAL MANUFACTURING | TRITURBINE | EQ | INE152M01016 | . Tube Investments of India Ltd. | AUTOMOBILE | TIINDIA | EQ | INE974X01010 | . UCO Bank | FINANCIAL SERVICES | UCOBANK | EQ | INE691A01018 | . UFLEX Ltd. | INDUSTRIAL MANUFACTURING | UFLEX | EQ | INE516A01017 | . UPL Ltd. | FERTILISERS &amp; PESTICIDES | UPL | EQ | INE628A01036 | . Ujjivan Financial Services Ltd. | FINANCIAL SERVICES | UJJIVAN | EQ | INE334L01012 | . UltraTech Cement Ltd. | CEMENT &amp; CEMENT PRODUCTS | ULTRACEMCO | EQ | INE481G01011 | . Union Bank of India | FINANCIAL SERVICES | UNIONBANK | EQ | INE692A01016 | . United Breweries Ltd. | CONSUMER GOODS | UBL | EQ | INE686F01025 | . United Spirits Ltd. | CONSUMER GOODS | MCDOWELL-N | EQ | INE854D01024 | . V-Guard Industries Ltd. | CONSUMER GOODS | VGUARD | EQ | INE951I01027 | . V-Mart Retail Ltd. | CONSUMER GOODS | VMART | EQ | INE665J01013 | . V.I.P. Industries Ltd. | CONSUMER GOODS | VIPIND | EQ | INE054A01027 | . VRL Logistics Ltd. | SERVICES | VRLLOG | EQ | INE366I01010 | . VST Industries Ltd. | CONSUMER GOODS | VSTIND | EQ | INE710A01016 | . Va Tech Wabag Ltd. | SERVICES | WABAG | EQ | INE956G01038 | . Vakrangee Ltd. | IT | VAKRANGEE | EQ | INE051B01021 | . Vardhman Textiles Ltd. | TEXTILES | VTL | EQ | INE825A01012 | . Varroc Engineering Ltd. | AUTOMOBILE | VARROC | EQ | INE665L01035 | . Varun Beverages Ltd. | CONSUMER GOODS | VBL | EQ | INE200M01013 | . Vedanta Ltd. | METALS | VEDL | EQ | INE205A01025 | . Venky’s (India) Ltd. | CONSUMER GOODS | VENKEYS | EQ | INE398A01010 | . Vinati Organics Ltd. | CHEMICALS | VINATIORGA | EQ | INE410B01029 | . Vodafone Idea Ltd. | TELECOM | IDEA | EQ | INE669E01016 | . Voltas Ltd. | CONSUMER GOODS | VOLTAS | EQ | INE226A01021 | . WABCO India Ltd. | AUTOMOBILE | WABCOINDIA | EQ | INE342J01019 | . Welspun Corp Ltd. | METALS | WELCORP | EQ | INE191B01025 | . Welspun India Ltd. | TEXTILES | WELSPUNIND | EQ | INE192B01031 | . Whirlpool of India Ltd. | CONSUMER GOODS | WHIRLPOOL | EQ | INE716A01013 | . Wipro Ltd. | IT | WIPRO | EQ | INE075A01022 | . Wockhardt Ltd. | PHARMA | WOCKPHARMA | EQ | INE049B01025 | . Yes Bank Ltd. | FINANCIAL SERVICES | YESBANK | EQ | INE528G01027 | . Zee Entertainment Enterprises Ltd. | MEDIA &amp; ENTERTAINMENT | ZEEL | EQ | INE256A01028 | . Zensar Technolgies Ltd. | IT | ZENSARTECH | EQ | INE520A01027 | . Zydus Wellness Ltd. | CONSUMER GOODS | ZYDUSWELL | EQ | INE768C01010 | . eClerx Services Ltd. | IT | ECLERX | EQ | INE738I01010 | .",
            "url": "/markdown/2019/02/02/ml_stock_analysis.html",
            "relUrl": "/markdown/2019/02/02/ml_stock_analysis.html",
            "date": " • Feb 2, 2019"
        }
        
    
  
    
        ,"post13": {
            "title": "Python for finance",
            "content": "Python for finance . Uses pandas, matplotlib, mpl_finance, scikit-learn and the AlphaVantage Stock Market API . Written entirely in python. . import bs4 as bs import pickle import requests import os import pandas_datareader.data as web import datetime as dt import matplotlib.pyplot as plt import datetime as dt import numpy as np import csv import urllib.request, json import pandas as pd &#39;&#39;&#39;def save_sensex_tickers(): resp = requests.get(&#39;https://en.wikipedia.org/wiki/BSE_SENSEX&#39;) soup = bs.BeautifulSoup(resp.text, &#39;lxml&#39;) table = soup.find(&#39;table&#39;, {&#39;class&#39;: &#39;wikitable sortable&#39;}) tickers = [] for row in table.findAll(&#39;tr&#39;)[1:]: ticker = row.findAll(&#39;td&#39;)[1].text.replace(&#39;.&#39;,&#39;-&#39;) tickers.append(ticker) with open(&quot;sensextickers.pickle&quot;,&quot;wb&quot;) as f: pickle.dump(tickers,f) print(tickers) return tickers save_sensex_tickers() &#39;&#39;&#39; # save sensex_tickers() def convert_to_list(): with open(&#39;ListOfScripsFull.csv&#39;, &#39;r&#39;) as f: reader = csv.reader(f) scrips = list(reader) tickers = [] for i in range(len(scrips)): tickers.append(scrips[i][1]) del tickers[0] for ticker in tickers: ticker = ticker.replace(&#39;.&#39;,&#39;-&#39;).strip() tickers = [&#39;BSE:&#39;+ x for x in tickers] outfile = open(&quot;bsetickers.pickle&quot;,&quot;wb&quot;) pickle.dump(tickers,outfile) outfile.close() return tickers #convert_to_list() def get_data_from_av(reload_sensex=False): if reload_sensex: tickers = convert_to_list() else: with open(&quot;bsetickers.pickle&quot;, &quot;rb&quot;) as f: tickers = pickle.load(f) if not os.path.exists(&#39;stocks_dfs&#39;): os.makedirs(&#39;stocks_dfs&#39;) start = dt.datetime(2019, 6, 12) end = dt.datetime.now() api_key = &#39;ZV3NL5EA4BW0OKYT&#39; tick_names = [s.replace(&#39;:&#39;, &#39;-&#39;) for s in tickers] for ticker in tickers: url_string = &quot;https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&amp;symbol=%s&amp;outputsize=full&amp;apikey=%s&quot;%(ticker,api_key) file_to_save = &#39;stock_dfs/%s.csv&#39;%ticker.replace(&#39;:&#39;,&#39;-&#39;) print(ticker) if not os.path.exists(file_to_save): with urllib.request.urlopen(url_string) as url: data = json.loads(url.read().decode()) # extract stock market data data = data[&#39;Time Series (Daily)&#39;] df = pd.DataFrame(columns=[&#39;Date&#39;,&#39;Low&#39;,&#39;High&#39;,&#39;Close&#39;,&#39;Open&#39;]) for k,v in data.items(): date = dt.datetime.strptime(k, &#39;%Y-%m-%d&#39;) data_row = [date.date(),float(v[&#39;3. low&#39;]),float(v[&#39;2. high&#39;]), float(v[&#39;4. close&#39;]),float(v[&#39;1. open&#39;])] df.loc[-1,:] = data_row df.index = df.index + 1 print(&#39;Data saved to : %s&#39;%file_to_save) df.to_csv(file_to_save) get_data_from_av(True) . import datetime as dt import matplotlib.pyplot as plt from matplotlib import style import pandas as pd import pandas_datareader.data as web import matplotlib.dates as mdates from mpl_finance import candlestick_ohlc style.use(&#39;ggplot&#39;) start = dt.datetime(2019, 1 ,1) end = dt.datetime.now() df = web.DataReader(&quot;AAPL&quot;, &#39;av-daily&#39;, start, end, access_key=&#39;xxxxx&#39;) df = pd.read_csv(&#39;tsla.csv&#39;, parse_dates=True, index_col=0) df[&#39;100ma&#39;] = df[&#39;close&#39;].rolling(window=10, min_periods=0).mean() print(df.head()) &quot;&quot;&quot;ax1 = plt.subplot2grid((6,1), (0,0), rowspan=5, colspan=1) ax2 = plt.subplot2grid((6,1), (5,0), rowspan=1, colspan=1, sharex=ax1) ax1.plot(df.index, df[&#39;close&#39;]) ax1.plot(df.index, df[&#39;100ma&#39;]) ax2.bar(df.index, df[&#39;volume&#39;]) &quot;&quot;&quot; df_ohlc = df[&#39;close&#39;].resample(&#39;10D&#39;).ohlc() df_volume = df[&#39;volume&#39;].resample(&#39;10D&#39;).sum() df_ohlc.reset_index(inplace=True) df_ohlc[&#39;date&#39;] = df_ohlc[&#39;date&#39;].map(mdates.date2num) ax1 = plt.subplot2grid((6,1), (0,0), rowspan=5, colspan=1) ax2 = plt.subplot2grid((6,1), (5,0), rowspan=1, colspan=1, sharex=ax1) ax1.xaxis_date() candlestick_ohlc(ax1, df_ohlc.values, width=5, colorup=&#39;g&#39;) ax2.fill_between(df_volume.index.map(mdates.date2num),df_volume.values,0) plt.show() . Example: AAPL Stock Price . date open high low close volume . 02-01-2019 | 154.89 | 158.85 | 154.23 | 157.92 | 37039737 | . 03-01-2019 | 143.98 | 145.72 | 142 | 142.19 | 91312195 | . 04-01-2019 | 144.53 | 148.5499 | 143.8 | 148.26 | 58607070 | . 07-01-2019 | 148.7 | 148.83 | 145.9 | 147.93 | 54777764 | . 08-01-2019 | 149.56 | 151.82 | 148.52 | 150.75 | 41025314 | . 09-01-2019 | 151.29 | 154.53 | 149.63 | 153.31 | 45099081 | . 10-01-2019 | 152.5 | 153.97 | 150.86 | 153.8 | 35780670 | . 11-01-2019 | 152.88 | 153.7 | 151.51 | 152.29 | 27023241 | . 14-01-2019 | 150.85 | 151.27 | 149.22 | 150 | 32439186 | . 15-01-2019 | 150.27 | 153.39 | 150.05 | 153.07 | 28710324 | . 16-01-2019 | 153.08 | 155.88 | 153 | 154.94 | 30569706 | . 17-01-2019 | 154.2 | 157.66 | 153.26 | 155.86 | 29821160 | . 18-01-2019 | 157.5 | 157.88 | 155.9806 | 156.82 | 33751023 | . 22-01-2019 | 156.41 | 156.73 | 152.62 | 153.3 | 30393970 | . 23-01-2019 | 154.15 | 155.14 | 151.7 | 153.92 | 23130570 | . 24-01-2019 | 154.11 | 154.48 | 151.74 | 152.7 | 25441549 | . 25-01-2019 | 155.48 | 158.13 | 154.32 | 157.76 | 33547893 | . 28-01-2019 | 155.79 | 156.33 | 153.66 | 156.3 | 26192058 | . 29-01-2019 | 156.25 | 158.13 | 154.11 | 154.68 | 41587239 | . 30-01-2019 | 163.25 | 166.15 | 160.23 | 165.25 | 61109780 | . 31-01-2019 | 166.11 | 169 | 164.56 | 166.44 | 40739649 | . 01-02-2019 | 166.96 | 168.98 | 165.93 | 166.52 | 32668138 | . 04-02-2019 | 167.41 | 171.655 | 167.28 | 171.25 | 31495582 | . 05-02-2019 | 172.86 | 175.08 | 172.3501 | 174.18 | 36101628 | . 06-02-2019 | 174.65 | 175.57 | 172.8531 | 174.24 | 28239591 | . 07-02-2019 | 172.4 | 173.94 | 170.34 | 170.94 | 31741690 | . 08-02-2019 | 168.99 | 170.66 | 168.42 | 170.41 | 23819966 | . 11-02-2019 | 171.05 | 171.21 | 169.25 | 169.43 | 20993425 | . 12-02-2019 | 170.1 | 171 | 169.7 | 170.89 | 22283523 | . 13-02-2019 | 171.39 | 172.48 | 169.92 | 170.18 | 22490233 | . 14-02-2019 | 169.71 | 171.2615 | 169.38 | 170.8 | 21835747 | . 15-02-2019 | 171.25 | 171.7 | 169.75 | 170.42 | 24626814 | . 19-02-2019 | 169.71 | 171.44 | 169.49 | 170.93 | 18972826 | . 20-02-2019 | 171.19 | 173.32 | 170.99 | 172.03 | 26114362 | . 21-02-2019 | 171.8 | 172.37 | 170.3 | 171.06 | 17249670 | . 22-02-2019 | 171.58 | 173 | 171.38 | 172.97 | 18913154 | . 25-02-2019 | 174.16 | 175.87 | 173.95 | 174.23 | 21873358 | . 26-02-2019 | 173.71 | 175.3 | 173.1732 | 174.33 | 17070211 | . 27-02-2019 | 173.21 | 175 | 172.73 | 174.87 | 27835389 | . 28-02-2019 | 174.32 | 174.91 | 172.92 | 173.15 | 28215416 | . 01-03-2019 | 174.28 | 175.15 | 172.89 | 174.97 | 25886167 | . 04-03-2019 | 175.69 | 177.75 | 173.97 | 175.85 | 27436203 | . 05-03-2019 | 175.94 | 176 | 174.54 | 175.53 | 19737419 | . 06-03-2019 | 174.67 | 175.49 | 173.94 | 174.52 | 20810384 | . 07-03-2019 | 173.87 | 174.44 | 172.02 | 172.5 | 24796374 | . 08-03-2019 | 170.32 | 173.07 | 169.5 | 172.91 | 23999358 | . 11-03-2019 | 175.49 | 179.12 | 175.35 | 178.9 | 32011034 | . 12-03-2019 | 180 | 182.67 | 179.37 | 180.91 | 32467584 | . 13-03-2019 | 182.25 | 183.3 | 180.92 | 181.71 | 31032524 | . 14-03-2019 | 183.9 | 184.1 | 182.56 | 183.73 | 23579508 | . 15-03-2019 | 184.85 | 187.33 | 183.74 | 186.12 | 39042912 | . 18-03-2019 | 185.8 | 188.39 | 185.79 | 188.02 | 26219832 | . 19-03-2019 | 188.35 | 188.99 | 185.92 | 186.53 | 31646369 | . 20-03-2019 | 186.23 | 189.49 | 184.73 | 188.16 | 31035231 | . 21-03-2019 | 190.02 | 196.33 | 189.81 | 195.09 | 51034237 | . 22-03-2019 | 195.34 | 197.69 | 190.78 | 191.05 | 42407666 | . 25-03-2019 | 191.51 | 191.98 | 186.6 | 188.74 | 43845293 | . 26-03-2019 | 191.664 | 192.88 | 184.58 | 186.79 | 49800538 | . 27-03-2019 | 188.75 | 189.76 | 186.55 | 188.47 | 29848427 | . 28-03-2019 | 188.95 | 189.559 | 187.53 | 188.72 | 20780363 | . 29-03-2019 | 189.83 | 190.08 | 188.54 | 189.95 | 23563961 | . 01-04-2019 | 191.64 | 191.68 | 188.38 | 191.24 | 27861964 | . 02-04-2019 | 191.09 | 194.46 | 191.05 | 194.02 | 22765732 | . 03-04-2019 | 193.25 | 196.5 | 193.15 | 195.35 | 23271830 | . 04-04-2019 | 194.79 | 196.37 | 193.14 | 195.69 | 19114275 | . 05-04-2019 | 196.45 | 197.1 | 195.93 | 197 | 18526644 | . 08-04-2019 | 196.42 | 200.23 | 196.34 | 200.1 | 25881697 | . 09-04-2019 | 200.32 | 202.85 | 199.23 | 199.5 | 35768237 | . 10-04-2019 | 198.68 | 200.74 | 198.18 | 200.62 | 21695288 | . 11-04-2019 | 200.85 | 201 | 198.4431 | 198.95 | 20900808 | . 12-04-2019 | 199.2 | 200.14 | 196.21 | 198.87 | 27760668 | . 15-04-2019 | 198.58 | 199.85 | 198.01 | 199.23 | 17536646 | . 16-04-2019 | 199.46 | 201.37 | 198.56 | 199.25 | 25696385 | . 17-04-2019 | 199.54 | 203.38 | 198.61 | 203.13 | 28906780 | . 18-04-2019 | 203.12 | 204.15 | 202.52 | 203.86 | 24195766 | . 22-04-2019 | 202.83 | 204.94 | 202.34 | 204.53 | 19439545 | . 23-04-2019 | 204.43 | 207.75 | 203.9 | 207.48 | 23322991 | . 24-04-2019 | 207.36 | 208.48 | 207.05 | 207.16 | 17540609 | . 25-04-2019 | 206.83 | 207.76 | 205.12 | 205.28 | 18543206 | . 26-04-2019 | 204.9 | 205 | 202.12 | 204.3 | 18649102 | . 29-04-2019 | 204.4 | 205.97 | 203.86 | 204.61 | 22204716 | . 30-04-2019 | 203.06 | 203.4 | 199.11 | 200.67 | 46534923 | . 01-05-2019 | 209.88 | 215.31 | 209.23 | 210.52 | 64827328 | . 02-05-2019 | 209.84 | 212.65 | 208.13 | 209.15 | 31996324 | . 03-05-2019 | 210.89 | 211.84 | 210.23 | 211.75 | 20892378 | . 06-05-2019 | 204.29 | 208.84 | 203.5 | 208.48 | 32443113 | . 07-05-2019 | 205.88 | 207.4175 | 200.825 | 202.86 | 38763698 | . 08-05-2019 | 201.9 | 205.34 | 201.75 | 202.9 | 26339504 | . 09-05-2019 | 200.4 | 201.68 | 196.66 | 200.72 | 34908607 | . 10-05-2019 | 197.419 | 198.85 | 192.77 | 197.18 | 41208712 | . 13-05-2019 | 187.71 | 189.48 | 182.85 | 185.72 | 57430623 | . 14-05-2019 | 186.41 | 189.7 | 185.41 | 188.66 | 36529677 | . 15-05-2019 | 186.27 | 191.75 | 186.02 | 190.92 | 26544718 | . 16-05-2019 | 189.91 | 192.4689 | 188.84 | 190.08 | 33031364 | . 17-05-2019 | 186.93 | 190.9 | 186.76 | 189 | 32879090 | . 20-05-2019 | 183.52 | 184.349 | 180.2839 | 183.09 | 38612290 | . 21-05-2019 | 185.22 | 188 | 184.7 | 186.6 | 28364848 | . 22-05-2019 | 184.66 | 185.71 | 182.55 | 182.78 | 29748556 | . 23-05-2019 | 179.8 | 180.54 | 177.81 | 179.66 | 36529736 | . 24-05-2019 | 180.2 | 182.14 | 178.62 | 178.97 | 23714686 | . 28-05-2019 | 178.92 | 180.59 | 177.91 | 178.23 | 27948160 | . 29-05-2019 | 176.42 | 179.35 | 176 | 177.38 | 28481165 | . 30-05-2019 | 177.95 | 179.23 | 176.67 | 178.3 | 21218412 | . 31-05-2019 | 176.23 | 177.99 | 174.99 | 175.07 | 27043584 | . 03-06-2019 | 175.6 | 177.92 | 170.27 | 173.3 | 40396069 | . 04-06-2019 | 175.44 | 179.83 | 174.52 | 179.64 | 30967961 | . 05-06-2019 | 184.28 | 184.99 | 181.14 | 182.54 | 29773427 | . 06-06-2019 | 183.08 | 185.47 | 182.1489 | 185.22 | 22526311 | . 07-06-2019 | 186.51 | 191.92 | 185.77 | 190.15 | 30684393 | . 10-06-2019 | 191.81 | 195.37 | 191.62 | 192.58 | 26220851 | . 11-06-2019 | 194.86 | 196 | 193.6 | 194.81 | 25020913 | .",
            "url": "/markdown/2018/10/02/finance_py.html",
            "relUrl": "/markdown/2018/10/02/finance_py.html",
            "date": " • Oct 2, 2018"
        }
        
    
  
    
        ,"post14": {
            "title": "MADLIB - Story generator in JavaScript",
            "content": "MADLIB - Story generator in JavaScript . main.js . var customName = document.getElementById(&#39;customname&#39;); var randomize = document.querySelector(&#39;.randomize&#39;); var story = document.querySelector(&#39;.story&#39;); function randomValueFromArray(array){ return array[Math.floor(Math.random()*array.length)]; } var storyText = &quot;It was 94 fahrenheit outside, so :insertx: went for a walk. When they got to :inserty:, they stared in horror for a few moments, then :insertz:. Bob saw the whole thing, but was not surprised — :insertx: weighs 300 pounds, and it was a hot day.&quot;; var insertX = [&quot;Willy the Goblin&quot;, &quot;Big Daddy&quot;, &quot;Father Christmas&quot;] var insertY =[&quot;the soup kitchen&quot;, &quot;Disneyland&quot;, &quot;the White House&quot;] var insertZ = [&quot;spontaneously combusted&quot;, &quot;melted into a puddle on the sidewalk&quot;, &quot;turned into a slug and crawled away&quot;] randomize.addEventListener(&#39;click&#39;, result); function result() { var newStory = storyText; var xItem = randomValueFromArray(insertX); var yItem = randomValueFromArray(insertY); var zItem = randomValueFromArray(insertZ); newStory = newStory.replace(/:insertx:/g, xItem); newStory = newStory.replace(/:inserty:/g, yItem); newStory = newStory.replace(/:insertz:/g, zItem); if(customName.value !== &#39;&#39;) { var name = customName.value; newStory = newStory.replace(/Bob/g, name); } if(document.getElementById(&quot;uk&quot;).checked) { var weight = Math.round(300*0.071429) + &#39; stone&#39;; var temperature = Math.round((94-32)/1.8) + &#39; centingrade&#39;; newStory = newStory.replace(/94 fahrenheit/g, temperature); newStory = newStory.replace(/300 pounds/g, weight); } story.textContent = newStory ; story.style.visibility = &#39;visible&#39;; } document.querySelector(&#39;html&#39;).style.backgroundColor = &#39;blue&#39;; . . index.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; &lt;title&gt;Silly story generator&lt;/title&gt; &lt;style&gt; body { font-family: helvetica, sans-serif; width: 350px; } label { font-weight: bold; } div { padding-bottom: 20px; } input[type=&quot;text&quot;] { padding: 5px; width: 150px; } p { background: #FFC125; color: #5E2612; padding: 10px; visibility: hidden; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;label for=&quot;customname&quot;&gt;Enter custom name:&lt;/label&gt; &lt;input id=&quot;customname&quot; type=&quot;text&quot; placeholder=&quot;&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;label for=&quot;us&quot;&gt;US&lt;/label&gt;&lt;input id=&quot;us&quot; type=&quot;radio&quot; name=&quot;ukus&quot; value=&quot;us&quot; checked&gt; &lt;label for=&quot;uk&quot;&gt;UK&lt;/label&gt;&lt;input id=&quot;uk&quot; type=&quot;radio&quot; name=&quot;ukus&quot; value=&quot;uk&quot;&gt; &lt;/div&gt; &lt;div&gt; &lt;button class=&quot;randomize&quot;&gt;Generate random story&lt;/button&gt; &lt;/div&gt; &lt;!-- Thanks a lot to Willy Aguirre for his help with the code for this assessment --&gt; &lt;p class=&quot;story&quot;&gt;&lt;/p&gt; &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . . style.css . body { font-family: &quot;Benton Sans&quot;, &quot;Helvetica Neue&quot;, helvetica, arial, sans-serif; margin: 2em; } h1 { font-style: italic; color: #373fff; } .",
            "url": "/markdown/2018/09/25/story_generator.html",
            "relUrl": "/markdown/2018/09/25/story_generator.html",
            "date": " • Sep 25, 2018"
        }
        
    
  
    
        ,"post15": {
            "title": "TicTacToe in python - Commandline",
            "content": "TicTacToe in Python - Commandline . A text-based version of the popular two player game. . Size of the game is dynamically set depending on the user’s choice. . This game is entirely written in python. . This script uses colorama for adding color to the commandline output. . Install colorama to see colored output. . # @author = RKP # python version = 3.7 import itertools from colorama import Fore, Back, Style, init init() def win(current_game): def all_same(l): if l.count(l[0]) == len(l) and l[0] != 0: return True else: return False # horizontal for row in game: print(row) if all_same(row): print(f&quot;Player {row[0]} is the winne horizontally!&quot;) return True # vertical for col in range(len(game[0])): check = [] for row in game: check.append(row[col]) if all_same(check): print(f&quot;Player {check[0]} is the winner vertically!&quot;) return True # / diagonal diags = [] for idx, reverse_idx in enumerate(reversed(range(len(game)))): diags.append(game[idx][reverse_idx]) if all_same(diags): print(f&quot;Player {diags[0]} has won diagonally (/)&quot;) return True # diagonal diags = [] for ix in range(len(game)): diags.append(game[ix][ix]) if all_same(diags): print(f&quot;Player {diags[0]} has won Diagonally ( )&quot;) return True return False def game_board(game_map, player=0, row=0, column=0, just_display=False): try: if game_map[row][column] != 0: print(&quot;This space is occupied, try another!&quot;) return False print(&quot; &quot;+&quot; &quot;.join([str(i) for i in range(len(game_map))])) if not just_display: game_map[row][column] = player for count, row in enumerate(game_map): colored_row = &quot;&quot; for item in row: if item == 0: colored_row += &quot; &quot; elif item == 1: colored_row += Fore.GREEN + &quot; X &quot; + Style.RESET_ALL elif item == 2: colored_row += Fore.MAGENTA + &quot; O &quot; + Style.RESET_ALL print(count, colored_row) return game_map except IndexError: print(&quot;ERROR&quot;) return False except Exception as e: print(str(e)) return False play = True players = [1, 2] while play: game_size = int(input(&quot;What size game TicTacToe?&quot;)) game = [[0 for i in range(game_size)] for i in range(game_size)] game_won = False player_cycle = itertools.cycle([1, 2]) game_board(game, just_display=True) while not game_won: current_player = next(player_cycle) played = False while not played: print(f&quot;Player: {current_player}&quot;) column_choice = int(input(&quot;Which column?&quot;)) row_choice = int(input(&quot;Which row?&quot;)) played = game_board(game, player=current_player, row=row_choice, column=column_choice) if win(game): game_won = True again = input(&quot;The game is over, would you like to play again? (y/n)&quot;) if again.lower() == &quot;y&quot;: print(&quot;Restarting!&quot;) elif again.lower() == &quot;n&quot;: print(&quot;Bye!&quot;) play = False else: print(&quot;Not a valid answer, but see you!&quot;) play = False .",
            "url": "/markdown/2018/07/05/tictactoe.html",
            "relUrl": "/markdown/2018/07/05/tictactoe.html",
            "date": " • Jul 5, 2018"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Rohith Palakirti This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}